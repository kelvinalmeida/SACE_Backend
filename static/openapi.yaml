openapi: 3.0.3
info:
  title: Score API
  version: '1.0'
servers:
  - url: http://127.0.0.1:5000

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Token de autenticação JWT. Deve ser incluído no cabeçalho 'Authorization' com o prefixo 'Bearer'."
  schemas:

    DenunciaUpdateInput:
      type: object
      required:
        - tipo_imovel
        - bairro
        - numero
        - rua_avenida
      properties:
        rua_avenida: 
          type: string
          example: "Avenida da Paz (Atualizada)"
        numero: 
          type: integer
          example: 1001
        bairro: 
          type: string
          example: "Centro"
        tipo_imovel: 
          type: string
          example: "Residência"
        endereco_complemento: 
          type: string
          nullable: true
          example: "Perto do mercado"
        data_denuncia: 
          type: string
          format: date
          description: "Data da denúncia (AAAA-MM-DD)"
          example: "2025-10-03"
        hora_denuncia: 
          type: string
          description: "Hora da denúncia (HH:MM:SS)"
          example: "10:30:00"
        observacoes: 
          type: string
          nullable: true
          example: "Denúncia foi atualizada."
        status:
          type: string
          description: "Status atual da denúncia."
          example: "Em Análise"
        agente_responsavel_id: 
          type: integer
          nullable: true
          example: 7
        files:
          type: array
          items:
            type: string
            format: binary
          description: "Novos arquivos de evidência para adicionar à denúncia."

    AgenteVisitasDenunciasResponse:
      type: object
      properties:
        areas_de_visitas:
          type: array
          description: "Lista detalhada das áreas de visita associadas ao agente."
          items:
            $ref: '#/components/schemas/AreaDeVisitaDetalhes' # Reutiliza o schema existente
        denuncias:
          type: array
          description: "Lista detalhada das denúncias sob responsabilidade do agente."
          items:
            $ref: '#/components/schemas/DenunciaCompleta' # Reutiliza o schema existente

    UpdateLarvicidaResponseData:
      type: object
      properties:
        larvicida_id: { type: integer, example: 1 }
        tipo: { type: string, example: "Pyriproxyfen" }
        forma: { type: string, example: "Granulado" }
        quantidade: { type: integer, example: 5 }

    UpdateAdulticidaResponseData:
      type: object
      properties:
        adulticida_id: { type: integer, example: 1 }
        tipo: { type: string, example: "Adulticida de Borrifação" }
        quantidade: { type: integer, example: 20 }

    UpdateRegistroResponseData:
      type: object
      # Reutiliza a maior parte da estrutura da resposta POST, mas ajusta os exemplos
      properties:
        registro_de_campo_id: { type: integer, example: 1 }
        ciclo_id: { type: integer, example: 3 }
        imovel_numero: { type: string, example: "45B" }
        imovel_lado: { type: string, example: "Ímpar" }
        imovel_categoria_da_localidade: { type: string, example: "Urbana" }
        imovel_tipo: { type: string, example: "Residencial" }
        imovel_status: { type: string, example: "Visitado" } # Exemplo de status atualizado
        imovel_complemento: { type: string, nullable: true, example: "Apto 101 UPDATED" }
        formulario_tipo: { type: string, nullable: true, example: "F2" }
        li: { type: boolean, example: false }
        pe: { type: boolean, example: true }
        t: { type: boolean, example: false }
        df: { type: boolean, example: true }
        pve: { type: boolean, example: false }
        numero_da_amostra: { type: string, nullable: true, example: "B-001" }
        quantiade_tubitos: { type: integer, nullable: true, example: 2 }
        observacao: { type: string, nullable: true, example: "Atualização de observação." }
        area_de_visita_id: { type: integer, example: 2 }
        agente_id: { type: integer, example: 12 }
        deposito_id: { type: integer, example: 45 }
        a1: { type: integer, example: 3 }
        a2: { type: integer, example: 2 }
        b: { type: integer, example: 1 } # Exemplo de contagem atualizada
        c: { type: integer, example: 1 }
        d1: { type: integer, example: 1 }
        d2: { type: integer, example: 3 }
        e: { type: integer, example: 2 }
        larvicidas: # Exemplo de como larvicidas/adulticidas podem ser retornados (baseado no seu código)
          type: array
          items:
            type: object
            properties:
              tipo: { type: string }
              forma: { type: string }
              quantidade: { type: integer }
          example: [{"tipo": "Spinosad", "forma": "Tablete", "quantidade": 2}]
        adulticidas:
          type: array
          items:
            type: object
            properties:
              tipo: { type: string }
              quantidade: { type: integer }
          example: [{"tipo": "Piretróide", "quantidade": 10}]
        files: # Exemplo de como arquivos podem ser retornados
          type: object
          example: {"Arquivo 1": "nova_foto.jpg"}

    FinalizarCicloResponse:
      type: object
      properties:
        message:
          type: string
          example: "Ciclo desativado. Novos registros de campo não serão mais inseridos até que um novo ciclo seja criado (ativado.)"
        novo_ciclo: # Nota: A chave no seu código é 'novo_ciclo', mas representa o ciclo *finalizado*. Ajustei a descrição.
          type: object
          description: "Detalhes do ciclo que foi finalizado."
          properties:
            id:
              type: integer
              description: "O ID do ciclo finalizado."
              example: 6
            numero:
              type: integer
              description: "O número sequencial do ciclo dentro do ano."
              example: 2
            ano:
              type: integer
              description: "O ano do ciclo finalizado."
              example: 2025
    
    NovoCicloResponse:
      type: object
      properties:
        message:
          type: string
          example: "Novo ciclo criado com sucesso!"
        novo_ciclo:
          type: object
          properties:
            id:
              type: integer
              description: "O ID do novo ciclo criado."
              example: 7
            numero:
              type: integer
              description: "O número sequencial do ciclo dentro do ano."
              example: 1
            ano:
              type: integer
              description: "O ano do novo ciclo."
              example: 2026

    GraficoPorBairroResponse:
      type: object
      description: "Estrutura de dados padrão para gráficos de barras ou linhas, agrupados por bairro ao longo dos ciclos de um ano."
      properties:
        labels:
          type: array
          description: "Os rótulos do eixo X, geralmente representando os ciclos."
          items:
            type: string
          example: ["Ciclo 1", "Ciclo 2", "Ciclo 3", "Ciclo 4"]
        datasets:
          type: array
          description: "Conjunto de dados para o gráfico, onde cada item representa um bairro."
          items:
            type: object
            properties:
              label:
                type: string
                description: "O nome do bairro."
                example: "Ponta Verde"
              data:
                type: array
                description: "Os valores para cada ciclo correspondente aos labels."
                items:
                  type: integer
                example: [10, 15, 8, 12]

    # Schema para um ponto de dados no gráfico de Casos Confirmados
    GraficoPontoCasosConfirmados:
      type: object
      properties:
        ano: { type: integer, example: 2025 }
        ciclo: { type: integer, example: 1 }
        casos_confirmados: { type: integer, example: 15 }

    # Schema para o resumo do ciclo atual de Casos Confirmados
    GraficoResumoCasosConfirmados:
      type: object
      properties:
        casos_confirmados:
          type: integer
          description: "Número de imóveis com casos confirmados no ciclo solicitado."
          example: 15
        dados_do_ultimo_ciclo:
          type: integer
          description: "Número de imóveis com casos confirmados no ciclo imediatamente anterior."
          example: 10
        porcentagem:
          type: string
          description: "A variação percentual em relação ao ciclo anterior."
          example: "50.0% ↑"
        crescimento:
          type: string
          description: "Indica se o número de casos aumentou, diminuiu ou permaneceu estável."
          enum: [aumentou, diminuiu, estável, "Novo"]
          example: "aumentou"

    # Schema principal da resposta para a rota de Casos Confirmados
    GraficoCasosConfirmadosResponse:
      type: object
      properties:
        dados_grafico:
          type: array
          description: "Lista de dados históricos para construir o gráfico."
          items:
            $ref: '#/components/schemas/GraficoPontoCasosConfirmados'
        resumo_ciclo_atual:
          $ref: '#/components/schemas/GraficoResumoCasosConfirmados'

    # Schema para um ponto de dados no gráfico de focos Positovos
    GraficoPontoFocosPositicos:
      type: object
      properties:
        ano: { type: integer, example: 2025 }
        ciclo: { type: integer, example: 1 }
        focos_positovos: { type: integer, example: 15 }

    # Schema para o resumo do ciclo atual de focos Positovos
    GraficoResumoFocosPositicos:
      type: object
      properties:
        focos_positovos:
          type: integer
          description: "Número de imóveis com focos Positovos no ciclo solicitado."
          example: 15
        dados_do_ultimo_ciclo:
          type: integer
          description: "Número de imóveis com focos Positovos no ciclo imediatamente anterior."
          example: 10
        porcentagem:
          type: string
          description: "A variação percentual em relação ao ciclo anterior."
          example: "50.0% ↑"
        crescimento:
          type: string
          description: "Indica se o número de focos aumentou, diminuiu ou permaneceu estável."
          enum: [aumentou, diminuiu, estável, "Novo"]
          example: "aumentou"

    # Schema principal da resposta para a rota de focos Positovos
    GraficoFocosPositicosResponse:
      type: object
      properties:
        dados_grafico:
          type: array
          description: "Lista de dados históricos para construir o gráfico."
          items:
            $ref: '#/components/schemas/GraficoPontoFocosPositicos'
        resumo_ciclo_atual:
          $ref: '#/components/schemas/GraficoResumoFocosPositicos'

    # Schema para um ponto de dados no gráfico de Depósitos Identificados
    GraficoPontoDepositosIdentificados:
      type: object
      properties:
        ano: { type: integer, example: 2025 }
        ciclo: { type: integer, example: 1 }
        depositos_identificados: { type: integer, example: 152 }
        
    # Schema para o resumo do ciclo atual de Depósitos Identificados
    GraficoResumoDepositosIdentificados:
      type: object
      properties:
        depositos_identificados:
          type: integer
          description: "Número total de depósitos identificados no ciclo solicitado."
          example: 152
        dados_do_ultimo_ciclo:
          type: integer
          description: "Número total de depósitos identificados no ciclo imediatamente anterior."
          example: 120
        porcentagem:
          type: string
          description: "A variação percentual em relação ao ciclo anterior."
          example: "26.67% ↑"
        crescimento:
          type: string
          description: "Indica se o número de depósitos aumentou, diminuiu ou permaneceu estável."
          enum: [aumentou, diminuiu, estável, "Novo"]
          example: "aumentou"

    # Schema principal da resposta para a rota de Depósitos Identificados
    GraficoDepositosIdentificadosResponse:
      type: object
      properties:
        dados_grafico:
          type: array
          description: "Lista de dados históricos para construir o gráfico."
          items:
            $ref: '#/components/schemas/GraficoPontoDepositosIdentificados'
        resumo_ciclo_atual:
          $ref: '#/components/schemas/GraficoResumoDepositosIdentificados'

    GraficoAtividadesRealizadas:
      type: object
      properties:
        LI:
          type: integer
          description: "Total de Levantamentos de Índice (LI) realizados."
          example: 10
        PE:
          type: integer
          description: "Total de Pontos Estratégicos (PE) verificados."
          example: 5
        T:
          type: integer
          description: "Total de Tratamentos Focais (T) realizados."
          example: 25
        DF:
          type: integer
          description: "Total de Delimitações de Foco (DF) realizadas."
          example: 8
        PVE:
          type: integer
          description: "Total de Pesquisas Vetoriais Especiais (PVE) realizadas."
          example: 2

    AnosCiclosResponse:
      type: object
      description: "Um objeto onde cada chave é um ano e o valor é uma lista dos ciclos disponíveis para aquele ano."
      additionalProperties:
        type: array
        items:
          type: integer
      example:
        "2024": [1, 2, 3, 4]
        "2025": [1, 2]

    GraficoDepositosTratados:
      type: object
      properties:
        larvicidas:
          type: integer
          description: "Número total de tratamentos com larvicida no ciclo solicitado."
          example: 45
        adulticidas:
          type: integer
          description: "Número total de tratamentos com adulticida no ciclo solicitado."
          example: 12
    
    GraficoImoveisTrabalhados:
      type: object
      properties:
        inspecionados:
          type: integer
          description: "Número de imóveis com status 'inspecionado'."
          example: 150
        bloqueados:
          type: integer
          description: "Número de imóveis com status 'bloqueado'."
          example: 5
        fechados:
          type: integer
          description: "Número de imóveis com status 'fechado'."
          example: 20
        recusados:
          type: integer
          description: "Número de imóveis com status 'recusado'."
          example: 10
          
    GraficoTaxaDeReincidencia:
      type: object
      description: "Um objeto onde cada chave é o nome de um bairro e o valor é o número de imóveis reincidentes com focos positivos naquele bairro."
      additionalProperties:
        type: integer
      example:
        "Ponta Verde": 5
        "Jatiúca": 2
        "Farol": 8

    ArtigoArquivoAnexo:
      type: object
      properties:
        arquivo_artigo_id:
          type: integer
          example: 5
        arquivo_nome:
          type: string
          example: "imagem_anexa.png"

    ArtigoOutput:
      type: object
      description: "Representa um artigo retornado pela API."
      properties:
        artigo_id:
          type: integer
          example: 42
        supervisor_id:
          type: integer
          example: 5
        data_criacao:
          type: string
          example: "Sat, 11 Oct 2025 00:00:00 GMT"
        link_artigo:
          type: string
          nullable: true
          format: uri
          example: "https://www.who.int/news-room/fact-sheets/detail/dengue-and-severe-dengue"
        titulo:
          type: string
          example: "Guia de Prevenção da Dengue"
        descricao:
          type: string
          example: "Um guia completo sobre como evitar focos do mosquito."
        imagem_nome:
          type: string
          nullable: true
          example: "capa_artigo.png"
        supervisor_nome:
          type: string
          description: "Nome do supervisor que publicou o artigo."
          example: "Carlos Pereira Costa"

    ArtigoCreateResponse:
      type: object
      description: "Resposta ao criar um novo artigo com sucesso."
      properties:
        message:
          type: string
          example: "Artigo e arquivos anexados criados com sucesso."
        artigo_id:
          type: integer
          example: 42
        titulo:
          type: string
          example: "Guia de Prevenção da Dengue"
        descricao:
          type: string
          example: "Um guia completo sobre como evitar focos do mosquito."
        link_artigo:
          type: string
          nullable: true
          format: uri
          example: "https://www.who.int/news-room/fact-sheets/detail/dengue-and-severe-dengue"
        imagem_nome:
          type: string
          nullable: true
          example: "capa_artigo.png"

    DenunciaCompleta:
      type: object
      properties:
        denuncia_id: { type: integer, example: 51 }
        rua_avenida: { type: string, example: "Avenida da Paz" }
        numero: { type: integer, example: 1000 }
        bairro: { type: string, example: "Centro" }
        tipo_imovel: { type: string, example: "Terreno Baldio" }
        endereco_complemento: { type: string, nullable: true, example: "Ao lado da padaria" }
        data_denuncia: { type: string, format: date, example: "2025-10-02" }
        hora_denuncia: { type: string, format: time, example: "15:59:00" }
        observacoes: { type: string, nullable: true, example: "Muitos pneus acumulados com água." }
        supervisor_id: { type: integer, example: 5 }
        nome_completo: { type: string, description: "Nome do supervisor que registrou a denúncia", example: "Carlos Pereira Costa" }
        cpf: { type: string, example: "34567890123" }
        status: { type: string, example: "Em Análise" }
        usuario_id: { type: integer, example: 3 }
        agente_responsavel_id: { type: integer, nullable: true, example: 2 }
        # deposito:
        #   $ref: '#/components/schemas/Deposito'
        arquivos:
          type: array
          items:
            $ref: '#/components/schemas/ArquivoDenuncia'
    DenunciaResponseData:
      type: object
      properties:
        denuncia_id: { type: integer, example: 51 }
        supervisor_id: { type: integer, example: 5 }
        rua_avenida: { type: string, example: "Avenida da Paz" }
        numero: { type: integer, example: 1000 }
        bairro: { type: string, example: "Centro" }
        tipo_imovel: { type: string, example: "Terreno Baldio" }
        endereco_complemento: { type: string, nullable: true, example: "Ao lado da padaria" }
        data_denuncia: { type: string, format: date, example: "2025-10-02" }
        hora_denuncia: { type: string, example: "15:59" }
        status: { type: string, example: "Em Análise" }
        usuario_id: { type: integer, example: 3 }
        observacoes: { type: string, nullable: true, example: "Muitos pneus acumulados com água." }
        agente_responsavel_id: { type: integer, nullable: true, example: 2 }
        # a1: { type: integer, example: 10 }
        # a2: { type: integer, example: 5 }
        # b: { type: integer, example: 3 }
        # c: { type: integer, example: 0 }
        # d1: { type: integer, example: 8 }
        # d2: { type: integer, example: 2 }
        # e: { type: integer, example: 1 }
        deposito_id: { type: integer, example: 77 }
        files:
          type: object
          example:
            Arquivo 1: "foto1.jpg"
            Arquivo 2: "foto2.png"

    UsuarioOutput:
      type: object
      properties:
        usuario_id: { type: integer, example: 12 }
        nome_completo: { type: string, example: "Maria da Silva" }
        cpf: { type: string, example: "11122233344" }
        rg: { type: string, nullable: true, example: "1234567" }
        data_nascimento: { type: string, format: date, example: "1990-10-25" }
        email: { type: string, format: email, example: "maria.silva@example.com" }
        telefone_ddd: { type: integer, example: 82 }
        telefone_numero: { type: string, example: "999998888" }
        estado: { type: string, example: "AL" }
        municipio: { type: string, example: "Maceió" }
        bairro: { type: string, example: "Jatiúca" }
        logradouro: { type: string, example: "Avenida João Davino" }
        numero: { type: integer, example: 500 }
        registro_do_servidor: { type: string, example: "MAT12345" }
        cargo: { type: string, example: "Agente de Endemias" }
        situacao_atual: { type: boolean, example: true }
        data_de_admissao: { type: string, format: date, example: "2020-03-15" }
        # Removido 'setor_de_atuacao' daqui para colocar a estrutura completa em AgenteOutput
        nivel_de_acesso: { type: string, enum: [agente, supervisor], example: "agente" }

    AgenteOutput:
      type: object
      allOf:
        - $ref: '#/components/schemas/UsuarioOutput'
        - type: object
          properties:
            agente_id: 
              type: integer
              example: 7
            setor_de_atuacao:
              type: array
              description: "Lista detalhada das áreas de atuação do agente."
              items:
                $ref: '#/components/schemas/AreaDeVisitaSimples'
    
    AreaDeVisitaSimples: # <--- NOVO SCHEMA
      type: object
      description: "Representação de uma área de visita sem a lista de agentes associados, usada na visualização de um agente."
      properties:
        area_de_visita_id:
          type: integer
          example: 1
        bairro:
          type: string
          example: "Ponta Verde"
        cep:
          type: string
          example: "57035-180"
        estado:
          type: string
          example: "AL"
        logadouro: # Mantendo o 'logadouro' como está na sua documentação
          type: string
          example: "Avenida Álvaro Otacílio"
        municipio:
          type: string
          example: "Maceió"
        numero_quarteirao:
          type: integer
          example: 15
        setor:
          type: string
          example: "Setor Ponta Verde 01"

    SupervisorOutput:
      type: object
      allOf:
        - $ref: '#/components/schemas/UsuarioOutput'
        - type: object
          properties:
            supervisor_id: { type: integer, example: 3 }
    UsuarioInput:
      type: object
      required:
        - nome_completo
        - cpf
        - data_nascimento
        - email
        - telefone_ddd
        - telefone_numero
        - estado
        - municipio
        - bairro
        - logradouro
        - numero
        - registro_do_servidor
        - cargo
        - situacao_atual
        - data_de_admissao
        - setor_de_atuacao
        - senha
        - nivel_de_acesso
      properties:
        nome_completo: { type: string, example: "Maria da Silva" }
        cpf: { type: string, example: "11122233344" }
        rg: { type: string, nullable: true, example: "1234567" }
        data_nascimento: { type: string, format: date, example: "1990-10-25" }
        email: { type: string, format: email, example: "maria.silva@example.com" }
        telefone_ddd: { type: integer, example: 82 }
        telefone_numero: { type: string, example: "999998888" }
        estado: { type: string, example: "AL" }
        municipio: { type: string, example: "Maceió" }
        bairro: { type: string, example: "Jatiúca" }
        logradouro: { type: string, example: "Avenida João Davino" }
        numero: { type: integer, example: 500 }
        registro_do_servidor: { type: string, example: "MAT12345" }
        cargo: { type: string, example: "Agente de Endemias" }
        situacao_atual: { type: boolean, example: true }
        data_de_admissao: { type: string, format: date, example: "2020-03-15" }
        # MUDANÇA IMPORTANTE AQUI:
        setor_de_atuacao:
          type: array
          items:
            type: integer
          description: "Lista de IDs das áreas de visita. Obrigatório se 'nivel_de_acesso' for 'agente'."
          example: [2, 3]
        senha: { type: string, format: password, example: "senhaSegura123" }
        nivel_de_acesso: { type: string, enum: [agente, supervisor], example: "agente" }

    
    AreaDeVisitaInput:
      type: object
      required:
        - cep
        - setor
        - numero_quarteirao
        - estado
        - municipio
        - bairro
        - logradouro
      properties:
        cep: { type: string, example: "57046-140" }
        setor: { type: string, example: "Setor Serraria 08" }
        numero_quarteirao: { type: integer, example: 15 }
        estado: { type: string, example: "AL" }
        municipio: { type: string, example: "Maceió" }
        bairro: { type: string, example: "Serraria" }
        logadouro: { type: string, example: "Avenida Menino Marcelo" }
        
    AgenteResumido:
      type: object
      description: "Representação resumida de um agente."
      properties:
        agente_id:
          type: integer
          example: 1
        nome:
          type: string
          example: "João da Silva"
        situacao_atual:
          type: boolean 
          example: true 
    AreaDeVisitaDetalhes:
      type: object
      properties:
        area_de_visita_id:
          type: integer
          example: 1
        bairro:
          type: string
          example: "Ponta Verde"
        cep:
          type: string
          example: "57035-180"
        estado:
          type: string
          example: "AL"
        logadouro:
          type: string
          example: "Avenida Álvaro Otacílio"
        municipio:
          type: string
          example: "Maceió"
        numero_quarteirao:
          type: integer
          example: 15
        setor:
          type: string
          example: "Setor Ponta Verde 01"
        agentes:
          type: array
          description: "Lista de agentes associados a esta área de visita."
          items:
            $ref: '#/components/schemas/AgenteResumido'
    Deposito:
      type: object
      properties:
        a1: { type: integer, example: 5 }
        a2: { type: integer, example: 2 }
        b: { type: integer, example: 1 }
        c: { type: integer, example: 1 }
        d1: { type: integer, example: 3 }
        d2: { type: integer, example: 1 }
        e: { type: integer, example: 4 }
    Larvicida:
      type: object
      properties:
        tipo: { type: string, example: "temefos" }
        forma: { type: string, example: "g" }
        larvicida_id: { type: integer, example: 3 }
        quantidade: { type: integer, example: 10 }
    Adulticida:
      type: object
      properties:
        tipo: { type: string, example: "malathion" }
        adulticida_id: { type: integer, example: 3 }
        quantidade: { type: integer, example: 200 }
    Arquivo:
      type: object
      properties:
        registro_de_campo_arquivo_id: { type: integer, example: 23 }
        arquivo_nome: { type: string, example: "foto_quintal.jpg" }
    ArquivoDenuncia:
      type: object
      properties:
        arquivo_denuncia_id: { type: integer, example: 23 }
        arquivo_nome: { type: string, example: "foto_quintal.jpg" }
    AreaDeVisita:
      type: object
      properties:
        bairro: { type: string, example: "Serraria" }
        cep: { type: string, example: "57046-140" }
        estado: { type: string, example: "AL" }
        logadouro: { type: string, example: "Avenida Menino Marcelo" }
        municipio: { type: string, example: "Maceió" }
        setor: { type: string, example: "Setor Serraria 08" }
    Ciclo:
      type: object
      properties:
        ano_de_criacao: { type: string, format: date-time, example: "2025-09-19T00:00:00Z" }
        ciclo: { type: integer, example: 6 }

    RegistroDeCampoCompleto:
      type: object
      properties:
        registro_de_campo_id: { type: integer, example: 1 }
        imovel_numero: { type: string, example: "123A" }
        imovel_lado: { type: string, example: "Par" }
        imovel_categoria_da_localidade: { type: string, example: "Urbana" }
        imovel_tipo: { type: string, example: "Residencial" }
        imovel_status: { type: string, example: "inspecionado" }
        imovel_complemento: { type: string, nullable: true, example: "Apto 101" }
        formulario_tipo: { type: string, nullable: true, example: "Dengue" }
        li: { type: boolean, example: true }
        pe: { type: boolean, example: false }
        t: { type: boolean, example: true }
        df: { type: boolean, example: false }
        pve: { type: boolean, example: false }
        numero_da_amostra: { type: string, nullable: true, example: "A-002" }
        quantiade_tubitos: { type: integer, nullable: true, example: 2 }
        observacao: { type: string, nullable: true, example: "Cão bravo no quintal." }
        area_de_visita_id: { type: integer, example: 2 }
        agente_id: { type: integer, example: 12 }
        deposito_id: { type: integer, example: 45 }
        agente_nome: { type: string, example: "João da Silva" }
        deposito:
          $ref: '#/components/schemas/Deposito'
        larvicidas:
          type: array
          items:
            $ref: '#/components/schemas/Larvicida'
        adulticidas:
          type: array
          items:
            $ref: '#/components/schemas/Adulticida'
        arquivos:
          type: array
          items:
            $ref: '#/components/schemas/Arquivo'
        area_de_visita:
          $ref: '#/components/schemas/AreaDeVisita'
        ciclo:
          $ref: '#/components/schemas/Ciclo'
paths:
  /login:
    post:
      summary: Authenticates a user and returns a JWT token
      description: Autentica o usuário e retorna um token JWT que deve ser usado para autenticar requisições futuras.
      tags:
        - Autenticação
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: O CPF do usuário.
                  example: "12345678900"
                password:
                  type: string
                  description: A senha do usuário.
                  format: password
                  example: "mysecretpassword"
      responses:
        '200':
          description: Login bem-sucedido.
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: O CPF do usuário.
                  agente_id:
                    type: integer
                    example: 2
                  supervisor_id:
                    type: integer
                    example: null
                  nome_completo:
                    type: string
                    example: "Pedro Cavalcante"
                  nivel_de_acesso:
                    type: string
                    example: "agente"
                    description: O nível de acesso do usuário.
                  token:
                    type: string
                    description: O Token JWT para autenticação.
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Falha na autenticação (CPF ou senha incorretos).
        '500':
          description: Erro interno do servidor.

  /registro_de_campo:
    post:
      summary: Cria um novo registro de campo
      description: |
        Submete um registro de campo completo via formulário.
        **Atenção:** Apenas usuários com nível de acesso "agente" podem realizar esta ação.
      tags:
        - Registro de Campo
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - imovel_numero
                - imovel_lado
                - imovel_categoria_da_localidade
                - imovel_tipo
                - imovel_status
                - area_de_visita_id
                - a1
                - a2
                - b
                - c
                - d1
                - d2
                - e
              properties:
                imovel_numero: { type: string, description: "Número do imóvel.", example: "45" }
                imovel_lado: { type: string, description: "Lado da rua (Par/Ímpar).", example: "Ímpar" }
                imovel_categoria_da_localidade: { type: string, example: "Urbana" }
                imovel_tipo: { type: string, example: "Residencial" }
                imovel_status: { type: string, example: "inspecionado" }
                imovel_complemento: { type: string, description: "Ex: Apto 101, Bloco C", nullable: true }
                formulario_tipo: { type: string, example: "Dengue", nullable: true }
                li: { type: boolean, description: "Flag booleana para LI." }
                pe: { type: boolean, description: "Flag booleana para PE." }
                t: { type: boolean, description: "Flag booleana para T." }
                df: { type: boolean, description: "Flag booleana para DF." }
                pve: { type: boolean, description: "Flag booleana para PVE." }
                numero_da_amostra: { type: string, example: "A-003", nullable: true }
                quantiade_tubitos: { type: integer, example: 4, nullable: true }
                observacao: { type: string, nullable: true }
                area_de_visita_id: { type: integer, example: 2 }
                a1: { type: integer, description: "Contagem depósito A1", example: 2 }
                a2: { type: integer, description: "Contagem depósito A2", example: 1 }
                b: { type: integer, description: "Contagem depósito B", example: 1 }
                c: { type: integer, description: "Contagem depósito C", example: 1 }
                d1: { type: integer, description: "Contagem depósito D1", example: 3 }
                d2: { type: integer, description: "Contagem depósito D2", example: 1 }
                e: { type: integer, description: "Contagem depósito E", example: 1 }
                larvicidas:
                  type: string
                  description: "String JSON representando um array de larvicidas utilizados."
                  example: '[{"tipo": "A", "forma": "g", "quantidade": 10}, {"tipo": "B", "forma": "t", "quantidade": 3}]'
                adulticidas:
                  type: string
                  description: "String JSON representando um array de adulticidas utilizados."
                  example: '[{"tipo": "W", "quantidade": 200}, {"tipo": "E", "quantidade": 100}]'
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: "Um ou mais arquivos para upload."
      responses:
        '201':
          description: Registro de campo criado com sucesso.
        '400':
          description: Requisição inválida (campos faltando ou dados incorretos).
        '401':
          description: Não autenticado (token ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não é um agente).
        '409':
          description: Erro É nescessário ter um ciclo ativo! Algum supervisor FINALIZOU UM CICLO e não ativou um novo! Peça para um supervisor criar um novo ciclo
        '500':
          description: Erro interno do servidor.
    
    get:
      summary: Lista todos os registros de campo do ciclo atual (ativo)
      description: Retorna uma lista completa de todos os registros de campo do ciclo atual (ativo). Requer autenticação.
      tags:
        - Registro de Campo
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de registros retornada com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegistroDeCampoCompleto'
        '401':
          description: Não autorizado.
        '500':
          description: Erro interno do servidor.

  /registro_de_campo/{registro_de_campo_id}:
    get:
      summary: Busca um registro de campo por ID
      description: Retorna os detalhes completos de um único registro de campo pelo seu ID. Requer autenticação.
      tags:
        - Registro de Campo
      security:
        - bearerAuth: []
      parameters:
        - name: registro_de_campo_id
          in: path
          required: true
          description: O ID do registro de campo a ser buscado.
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Detalhes do registro de campo retornados com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegistroDeCampoCompleto'
        '401':
          description: Não autorizado.
        '404':
          description: Registro de campo não encontrado.
        '500':
          description: Erro interno do servidor.
    
    put:
      summary: Atualiza um registro de campo existente
      description: |
        Atualiza completamente um registro de campo existente, incluindo seus depósitos associados. Larvicidas, adulticidas e arquivos são **adicionados** (o código atual não remove/atualiza os existentes, apenas insere novos).
        **Atenção:** Apenas usuários com nível de acesso "agente" podem realizar esta ação, e o agente deve estar associado à área de visita. Requer um ciclo ativo.
      tags:
        - Registro de Campo
      security:
        - bearerAuth: []
      parameters:
        - name: registro_de_campo_id
          in: path
          required: true
          description: O ID do registro de campo a ser atualizado.
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                # Lista de campos obrigatórios para a atualização
                - imovel_numero
                - imovel_lado
                - imovel_categoria_da_localidade
                - imovel_tipo
                - imovel_status
                - area_de_visita_id
                - a1
                - a2
                - b
                - c
                - d1
                - d2
                - e
              properties:
                # Reutilizar as mesmas propriedades do POST /registro_de_campo
                imovel_numero: { type: string, description: "Número do imóvel.", example: "45B" }
                imovel_lado: { type: string, description: "Lado da rua (Par/Ímpar).", example: "Ímpar" }
                imovel_categoria_da_localidade: { type: string, example: "Urbana" }
                imovel_tipo: { type: string, example: "Residencial" }
                imovel_status: { type: string, example: "Visitado" }
                imovel_complemento: { type: string, description: "Ex: Apto 101, Bloco C", nullable: true }
                formulario_tipo: { type: string, example: "F2", nullable: true }
                li: { type: boolean, description: "Flag booleana para LI." }
                pe: { type: boolean, description: "Flag booleana para PE." }
                t: { type: boolean, description: "Flag booleana para T." }
                df: { type: boolean, description: "Flag booleana para DF." }
                pve: { type: boolean, description: "Flag booleana para PVE." }
                numero_da_amostra: { type: string, example: "B-001", nullable: true }
                quantiade_tubitos: { type: integer, example: 2, nullable: true }
                observacao: { type: string, nullable: true, example: "Observação atualizada." }
                area_de_visita_id: { type: integer, example: 2 }
                a1: { type: integer, description: "Contagem depósito A1", example: 1 }
                a2: { type: integer, description: "Contagem depósito A2", example: 2 }
                b: { type: integer, description: "Contagem depósito B", example: 1 }
                c: { type: integer, description: "Contagem depósito C", example: 2}
                d1: { type: integer, description: "Contagem depósito D1", example: 2 }
                d2: { type: integer, description: "Contagem depósito D2", example: 2 }
                e: { type: integer, description: "Contagem depósito E", example: 3 }
                larvicidas:
                  type: string
                  description: "String JSON com **novos** larvicidas a serem adicionados."
                  example: '[{"tipo": "Spinosad", "forma": "Tablete", "quantidade": 2}]'
                adulticidas:
                  type: string
                  description: "String JSON com **novos** adulticidas a serem adicionados."
                  example: '[{"tipo": "Piretróide", "quantidade": 10}]'
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: "**Novos** arquivos para adicionar ao registro."
      responses:
        '200':
          description: Registro de campo atualizado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: "success" }
                  message: { type: string, example: "Registro de campo atualizado com sucesso" }
                  data:
                    $ref: '#/components/schemas/UpdateRegistroResponseData'
        '400':
          description: Requisição inválida (campos faltando, dados incorretos, agente não associado à área).
        '401':
          description: Não autenticado ou token inválido (não é agente).
        '404':
          description: Registro de campo não encontrado com o ID especificado.
        '409':
          description: Conflito (nenhum ciclo ativo encontrado).
        '500':
          description: Erro interno do servidor.
          
    delete:
      summary: Deleta um registro de campo por ID
      description: |
        Remove um registro de campo específico do sistema, identificado pelo seu ID.
        Requer autenticação.
      tags:
        - Registro de Campo
      security:
        - bearerAuth: []
      parameters:
        - name: registro_de_campo_id
          in: path
          required: true
          description: O ID do registro de campo a ser deletado.
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Registro de campo deletado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Registro de campo with ID 1 deleted successfully."
        '401':
          description: Não autenticado (token ausente ou inválido).
        '404':
          description: Registro de campo não encontrado com o ID especificado.
        '500':
          description: Erro interno do servidor.

  /area_de_visita:
    get:
      summary: Lista todas as áreas de visita
      description: |
        Retorna uma lista com todas as áreas de visita cadastradas.
        **Atenção:** Apenas usuários com nível de acesso "supervisor" podem executar esta ação.
      tags:
        - Area de Visita
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de áreas de visita retornada com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AreaDeVisitaDetalhes'
        '401':
          description: Não autorizado (token ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não é um supervisor).
        '500':
          description: Erro interno do servidor.
    post:
      summary: Cria múltiplas áreas de visita (em lote)
      description: |
        Registra uma ou mais áreas de visita no sistema a partir de uma lista JSON. A operação é transacional: ou todas as áreas são criadas com sucesso, ou nenhuma é.
        **Atenção:** Apenas usuários com nível de acesso "supervisor" podem executar esta ação.
      tags:
        - Area de Visita
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: Uma lista de objetos, onde cada objeto representa uma nova área de visita a ser criada.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AreaDeVisitaInput'
            example:
              - cep: "57000-001"
                setor: "Setor A 01"
                numero_quarteirao: 10
                estado: "AL"
                municipio: "Maceió"
                bairro: "Centro"
                logadouro: "Rua do Comércio"
              - cep: "57000-002"
                setor: "Setor B 02"
                numero_quarteirao: 25
                estado: "AL"
                municipio: "Maceió"
                bairro: "Ponta Verde"
                logadouro: "Avenida Álvaro Otacílio"
      responses:
        '201':
          description: Áreas de visita criadas com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "2 Áreas de visita criadas com sucesso." }
                  supervisor_id: { type: integer, example: 5 }
                  areas_criadas_ids:
                    type: array
                    items:
                      type: integer
                    example: [103, 104]
        '400':
          description: Requisição inválida. Ocorre se o corpo não for uma lista JSON, se a lista estiver vazia, ou se algum objeto na lista tiver dados faltando ou inválidos.
        '401':
          description: Não autorizado (token ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não é um supervisor).
        '500':
          description: Erro interno do servidor.
    
    delete:
      summary: Deleta múltiplas áreas de visita (em lote)
      description: |
        Remove uma ou mais áreas de visita do sistema com base em uma lista de IDs fornecida. A operação é transacional e será revertida se algum dos IDs não for encontrado.
        **Atenção:** Apenas usuários com nível de acesso "supervisor" podem deletar áreas.
      tags:
        - Area de Visita
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: Um objeto JSON contendo uma lista de IDs das áreas de visita a serem deletadas.
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: integer
                  example: [2, 3]
      responses:
        '200':
          description: Áreas de visita deletadas com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Areas de visitas com IDs [101, 102] deletadas com sucesso"
        '400':
          description: Requisição inválida (o campo 'ids' está faltando ou não é uma lista).
        '401':
          description: Não autenticado (token ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não é um supervisor).
        '404':
          description: Uma ou mais áreas de visita com os IDs especificados não foram encontradas.
        '500':
          description: Erro interno do servidor.

  /area_de_visita/{area_de_visita_id}:
    get:
      summary: Busca uma área de visita por ID
      description: |
        Retorna os detalhes de uma área de visita específica, identificada pelo seu ID.
        **Atenção:** Apenas usuários com nível de acesso "supervisor" podem executar esta ação.
      tags:
        - Area de Visita
      security:
        - bearerAuth: []
      parameters:
        - name: area_de_visita_id
          in: path
          required: true
          description: O ID da área de visita a ser buscada.
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: Detalhes da área de visita retornados com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AreaDeVisitaDetalhes'
              example:
                area_de_visita_id: 2
                cep: "57046-140"
                setor: "Setor Serraria 08"
                numero_quarteirao: 15
                estado: "AL"
                municipio: "Maceió"
                bairro: "Serraria"
                logadouro: "Avenida Menino Marcelo"
        '401':
          description: Não autorizado (token ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não é um supervisor).
        '404':
          description: Área de visita não encontrada com o ID especificado.
        '500':
          description: Erro interno do servidor.
    
    put:
      summary: Atualiza uma área de visita por ID
      description: |
        Atualiza todas as informações de uma área de visita específica, identificada pelo seu ID.
        **Atenção:** Apenas usuários com nível de acesso "supervisor" podem executar esta ação.
      tags:
        - Area de Visita
      security:
        - bearerAuth: []
      parameters:
        - name: area_de_visita_id
          in: path
          required: true
          description: O ID da área de visita a ser atualizada.
          schema:
            type: integer
            example: 2
      requestBody:
        required: true
        description: Um objeto JSON com todos os campos da área de visita a serem atualizados.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AreaDeVisitaInput'
      responses:
        '200':
          description: Área de visita atualizada com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Área de visita atualizada com sucesso"
                  area_de_visita_id:
                    type: integer
                    example: 2
                  supervisor_id:
                    type: integer
                    example: 5
        '400':
          description: Requisição inválida (ex 'numero_quarteirao' não é um inteiro).
        '401':
          description: Não autenticado (token ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não é um supervisor).
        '404':
          description: Área de visita não encontrada com o ID especificado.
        '500':
          description: Erro interno do servidor.
          
  /usuarios:
    post:
      summary: Cria múltiplos usuários (em lote)
      description: |
        Registra um ou mais usuários no sistema a partir de uma lista JSON. A operação é transacional: ou todos os usuários são criados com sucesso, ou nenhum é.
        **Atenção:** Apenas usuários com nível de acesso "supervisor" podem executar esta ação.
      tags:
        - Usuários
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: Uma lista de objetos, onde cada objeto representa um novo usuário a ser criado.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UsuarioInput'
            example:
              - nome_completo: "Carlos Souza"
                cpf: "44455566677"
                rg: "7654321"
                data_nascimento: "1985-05-20"
                email: "carlos.souza@example.com"
                telefone_ddd: 82
                telefone_numero: "988887777"
                estado: "AL"
                municipio: "Maceió"
                bairro: "Ponta Verde"
                logradouro: "Rua Durval Guimarães"
                numero: 1000
                registro_do_servidor: "MAT54321"
                cargo: "Agente de Endemias"
                situacao_atual: true
                data_de_admissao: "2018-07-22"
                setor_de_atuacao: [2, 3]
                senha: "outraSenhaForte456"
                nivel_de_acesso: "agente"
              - nome_completo: "Luiza Souza"
                cpf: "4445366677"
                rg: "7654321"
                data_nascimento: "1985-05-20"
                email: "carlos.sou3za@example.com"
                telefone_ddd: 82
                telefone_numero: "988887777"
                estado: "AL"
                municipio: "Maceió"
                bairro: "Ponta Verde"
                logradouro: "Rua Durval Guimarães"
                numero: 1000
                registro_do_servidor: "MAT54321"
                cargo: "Agente de Endemias"
                situacao_atual: true
                data_de_admissao: "2018-07-22"
                senha: "outraSenhaForte456"
                nivel_de_acesso: "supervisor"
      responses:
        '201':
          description: Usuários criados com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "1 Usuários criados com sucesso." }
                  supervisor_criador_id: { type: integer, example: 5 }
                  usuarios_criados_ids:
                    type: array
                    items:
                      type: integer
                    example: [25, 26]
        '400':
          description: Requisição inválida. Ocorre se o corpo não for uma lista JSON, se a lista estiver vazia, ou se algum usuário tiver dados faltando ou inválidos.
        '401':
          description: Não autorizado (token ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não é um supervisor).
        '409':
          description: Conflito. Um dos usuários na lista já existe (CPF ou e-mail duplicado).
        '500':
          description: Erro interno do servidor.
          
    get:
      summary: Lista todos os usuários (agentes e supervisores)
      description: |
        Retorna um objeto contendo duas listas separadas: uma com todos os agentes e outra com todos os supervisores cadastrados no sistema.
        Requer autenticação.
      tags:
        - Usuários
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de usuários retornada com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  agentes:
                    type: array
                    items:
                      $ref: '#/components/schemas/AgenteOutput'
                  supervisores:
                    type: array
                    items:
                      $ref: '#/components/schemas/SupervisorOutput'

        '401':
          description: Não autorizado (token ausente ou inválido).
        '500':
          description: Erro interno do servidor.
  
  /usuarios/agente/{agente_id}:
    get:
      summary: Busca um agente específico pelo ID de agente
      description: |
        Retorna os detalhes completos de um único usuário agente, 
        buscando diretamente pelo seu ID de agente (da tabela 'agente').
        A resposta inclui a lista detalhada de suas áreas de atuação (setor_de_atuacao).
        Requer autenticação.
      tags:
        - Usuários
      security:
        - bearerAuth: []
      parameters:
        - name: agente_id
          in: path
          required: true
          description: O ID de agente (chave primária da tabela 'agente').
          schema:
            type: integer
            example: 7
      responses:
        '200':
          description: Detalhes do agente retornados com sucesso.
          content:
            application/json:
              schema:
                # Seu schema 'AgenteOutput' já existente modela essa resposta.
                $ref: '#/components/schemas/AgenteOutput'
        '401':
          description: Não autenticado (token JWT ausente ou inválido).
        '404':
          description: Usuário agente não encontrado com o ID especificado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Usuário não encontrado"
        '500':
          description: Erro interno do servidor (ex - falha na conexão ou na consulta pelas áreas de atuação).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Database connection failed"


  /usuarios/supervisor/{supervisor_id}:
    get:
      summary: Busca um supervisor específico pelo ID de supervisor
      description: |
        Retorna os detalhes completos de um único usuário supervisor, 
        buscando diretamente pelo seu ID de supervisor (da tabela 'supervisor').
        Requer autenticação.
      tags:
        - Usuários
      security:
        - bearerAuth: []
      parameters:
        - name: supervisor_id
          in: path
          required: true
          description: O ID de supervisor (chave primária da tabela 'supervisor').
          schema:
            type: integer
            example: 3
      responses:
        '200':
          description: Detalhes do supervisor retornados com sucesso.
          content:
            application/json:
              schema:
                # O ideal é que esta rota retorne o mesmo schema SupervisorOutput
                # que você já definiu.
                $ref: '#/components/schemas/SupervisorOutput'
        '401':
          description: Não autenticado (token JWT ausente ou inválido).
        '404':
          description: Usuário supervisor não encontrado com o ID especificado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Usuário não encontrado"
        '500':
          description: Erro interno do servidor (ex - falha na conexão com o banco de dados).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Database connection failed"

  
  /denuncia:
    post:
      summary: Cria uma nova denúncia
      description: |
        Registra uma nova denúncia sobre um possível foco de dengue. A rota aceita dados do local, contagem de depósitos e múltiplos arquivos (fotos, vídeos) como evidência.
        **Atenção:** Apenas usuários com nível de acesso "supervisor" podem registrar denúncias.
      tags:
        - Denúncia
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - rua_avenida
                - numero
                - bairro
                - tipo_imovel
                # - a1
                # - a2
                # - b
                # - c
                # - d1
                # - d2
                # - e
              properties:
                rua_avenida: { type: string, example: "Avenida da Paz" }
                numero: { type: integer, example: 1000 }
                bairro: { type: string, example: "Centro" }
                tipo_imovel: { type: string, example: "Terreno Baldio" }
                endereco_complemento: { type: string, nullable: true, example: "Ao lado da padaria" }
                data_denuncia: { type: string, format: date, description: "Data da denúncia (opcional, ex: AAAA-MM-DD)", example: "2025-10-02" }
                hora_denuncia: { type: string, description: "Hora da denúncia (opcional, ex: HH:MM:SS)", example: "15:59:00" }
                observacoes: { type: string, nullable: true, example: "Muitos pneus acumulados com água." }
                agente_responsavel_id: { type: integer, nullable: true, example: "2" }
                # a1: { type: integer, description: "Contagem depósito A1", example: 10 }
                # a2: { type: integer, description: "Contagem depósito A2", example: 5 }
                # b: { type: integer, description: "Contagem depósito B", example: 3 }
                # c: { type: integer, description: "Contagem depósito C", example: 1 }
                # d1: { type: integer, description: "Contagem depósito D1", example: 8 }
                # d2: { type: integer, description: "Contagem depósito D2", example: 2 }
                # e: { type: integer, description: "Contagem depósito E", example: 1 }
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: "Um ou mais arquivos de evidência (fotos, etc)."
      responses:
        '201':
          description: Denúncia criada com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: "success" }
                  message: { type: string, example: "Denuncia recebida com sucesso" }
                  data:
                    $ref: '#/components/schemas/DenunciaResponseData'
        '400':
          description: Requisição inválida (campos obrigatórios faltando ou tipos de dados incorretos).
        '401':
          description: Não autenticado (token JWT ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não tem permissão de supervisor).
        '500':
          description: Erro interno do servidor.
          
    get:
      summary: Lista todas as denúncias
      description: |
        Retorna uma lista completa de todas as denúncias registradas no sistema.
        Cada denúncia na lista inclui detalhes do local, do supervisor responsável, depósitos e arquivos associados.
        Requer autenticação.
      tags:
        - Denúncia
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Uma lista de denúncias foi retornada com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DenunciaCompleta'
        '401':
          description: Não autenticado (token ausente ou inválido).
        '500':
          description: Erro interno do servidor.

  /denuncia/{denuncia_id}:
    get:
      summary: Busca uma denúncia por ID
      description: |
        Retorna os detalhes completos de uma única denúncia, identificada pelo seu ID.
        As informações incluem dados do local, supervisor, depósitos, e arquivos.
        Requer autenticação.
      tags:
        - Denúncia
      security:
        - bearerAuth: []
      parameters:
        - name: denuncia_id
          in: path
          required: true
          description: O ID único da denúncia a ser buscada.
          schema:
            type: integer
            example: 51
      responses:
        '200':
          description: Detalhes da denúncia retornados com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DenunciaCompleta'
        '401':
          description: Não autenticado (token ausente ou inválido).
        '404':
          description: Nenhuma denúncia foi encontrada com o ID especificado.
        '500':
          description: Erro interno do servidor (pode ocorrer se o ID não for encontrado, devido a um IndexError no código).
    
    put:
      summary: Atualiza uma denúncia por ID
      description: |
        Atualiza as informações de uma denúncia existente. Esta rota permite adicionar novos arquivos.
        **Atenção:** Apenas usuários com nível de acesso "supervisor" podem executar esta ação.
      tags:
        - Denúncia
      security:
        - bearerAuth: []
      parameters:
        - name: denuncia_id
          in: path
          required: true
          description: O ID da denúncia a ser atualizada.
          schema:
            type: integer
            example: 51
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DenunciaUpdateInput'
      responses:
        '201': # Seu código retorna 201 (Created)
          description: Denúncia atualizada com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: "success" }
                  message: { type: string, example: "Denuncia atualizada com sucesso" }
                  data:
                    $ref: '#/components/schemas/DenunciaResponseData'
        '400':
          description: Requisição inválida (campos obrigatórios faltando ou formato de dados incorreto, como data/hora).
        '401':
          description: Não autenticado (token JWT ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não é um supervisor).
        '404':
          description: Denúncia não encontrada com o ID especificado
        '500':
          description: Erro interno do servidor.
    
    delete:
      summary: Deleta uma denúncia por ID
      description: |
        Remove uma denúncia específica do sistema, identificada pelo seu ID.
        **Atenção:** Apenas usuários com nível de acesso "supervisor" podem executar esta ação.
      tags:
        - Denúncia
      security:
        - bearerAuth: []
      parameters:
        - name: denuncia_id
          in: path
          required: true
          description: O ID da denúncia a ser deletada.
          schema:
            type: integer
            example: 51
      responses:
        '200':
          description: Denúncia deletada com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Denúncia deletada com sucesso"
                  denuncia_id:
                    type: integer
                    example: 51
        '401':
          description: Não autenticado (token JWT ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não é um supervisor).
        '404':
          description: Denúncia não encontrada com o ID especificado.
        '500':
          description: Erro interno do servidor (falha na transação do banco de dados).

  /artigo:
    post:
      summary: Cria um novo artigo
      description: |
        Registra um novo artigo informativo no sistema. A rota aceita um título, descrição, um link externo opcional e uma imagem de capa opcional.
        **Atenção:** Apenas usuários com nível de acesso "supervisor" podem criar artigos.
      tags:
        - Artigos
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - titulo
                - descricao
                - link_artigo
              properties:
                titulo:
                  type: string
                  description: "O título do artigo."
                  example: "Como se Prevenir da Dengue"
                descricao:
                  type: string
                  description: "Uma breve descrição sobre o conteúdo do artigo."
                  example: "Dicas essenciais para o combate ao mosquito Aedes aegypti."
                link_artigo:
                  type: string
                  format: uri
                  description: "Link externo para o conteúdo completo do artigo (opcional)."
                  nullable: true
                  example: "https://www.gov.br/saude/pt-br/assuntos/saude-de-a-a-z/d/dengue"
                imagem:
                  type: string
                  format: binary
                  description: "Imagem de capa para o artigo (opcional)."
                  nullable: true
      responses:
        '201':
          description: Artigo criado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtigoCreateResponse'
        '400':
          description: Requisição inválida (campos obrigatórios faltando).
        '401':
          description: Não autenticado (token JWT ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não é um supervisor).
        '500':
          description: Erro interno do servidor.
    get:
      summary: Lista todos os artigos
      description: |
        Retorna uma lista de todos os artigos informativos cadastrados no sistema.
        Não Requer autenticação.
      tags:
        - Artigos
      security: []
      responses:
        '200':
          description: Uma lista de artigos foi retornada com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArtigoOutput'
        '401':
          description: Não autenticado (token ausente ou inválido).
        '500':
          description: Erro interno do servidor.

  /artigo/{artigo_id}:
    get:
      summary: Busca um artigo por ID
      description: |
        Retorna os detalhes completos de um único artigo, identificado pelo seu ID.
        Não Requer autenticação.
      tags:
        - Artigos
      security: []
      parameters:
        - name: artigo_id
          in: path
          required: true
          description: O ID único do artigo a ser buscado.
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: Detalhes do artigo retornados com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtigoOutput'
        '401':
          description: Não autenticado (token ausente ou inválido).
        '404':
          description: Artigo não encontrado com o ID especificado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Artigo not found"
        '500':
          description: Erro interno do servidor.
          
  /artigo/img/{artigo_id}:
    get:
      summary: Busca a imagem de capa de um artigo por ID
      description: |
        Retorna o arquivo de imagem associado a um artigo específico, identificado pelo seu ID. 
        A resposta não é um JSON, mas sim o próprio arquivo de imagem (e.g., PNG, JPG).
        Esta rota é pública e não requer autenticação.
      tags:
        - Artigos
      security: []
      parameters:
        - name: artigo_id
          in: path
          required: true
          description: O ID do artigo cuja imagem será buscada.
          schema:
            type: integer
            example: 42
      responses:
        '200':
          description: Imagem do artigo retornada com sucesso.
          content:
            image/png:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
        '404':
          description: Artigo ou imagem não encontrados no banco de dados ou no servidor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Imagem do Artigo não encontrada ou não cadastrada"
        '500':
          description: Erro interno do servidor.
  
  /anos_ciclos:
    get:
      summary: Lista todos os anos e seus respectivos ciclos
      description: |
        Retorna um objeto com todos os anos que possuem ciclos cadastrados, e para cada ano, uma lista dos números dos ciclos existentes.
        Requer autenticação.
      tags:
        - Ciclo
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Objeto de anos e ciclos retornado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnosCiclosResponse'
        '401':
          description: Não autenticado (token ausente ou inválido).
        '500':
          description: Erro interno do servidor.

  /grafico/depositos_identificados/{ano}/{ciclo}:
    get:
      summary: Obtém dados históricos para o gráfico de depósitos identificados
      description: |
        Retorna uma série histórica de dados com o total de depósitos identificados por ciclo, até o ano e ciclo especificados. Também inclui um resumo comparativo com o ciclo anterior.
        Esta rota é pública.
      tags:
        - Gráficos
      security: []
      parameters:
        - name: ano
          in: path
          required: true
          description: O ano do ciclo final da consulta.
          schema:
            type: integer
            example: 2025
        - name: ciclo
          in: path
          required: true
          description: O número do ciclo final da consulta.
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: Dados para o gráfico retornados com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraficoDepositosIdentificadosResponse'
        '500':
          description: Erro interno do servidor.

  /grafico/depositos_tratados/{ano}/{ciclo}:
    get:
      summary: Obtém dados para o gráfico de depósitos tratados
      description: |
        Retorna o número total de tratamentos com larvicidas e adulticidas realizados em um ciclo específico.
        Requer autenticação.
      tags:
        - Gráficos
      security: []
      parameters:
        - name: ano
          in: path
          required: true
          description: O ano do ciclo a ser consultado.
          schema:
            type: integer
            example: 2025
        - name: ciclo
          in: path
          required: true
          description: O número do ciclo a ser consultado.
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: Dados para o gráfico retornados com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraficoDepositosTratados'
        '401':
          description: Não autenticado (token ausente ou inválido).
        '500':
          description: Erro interno do servidor.
  
  /grafico/focos_positivos/{ano}/{ciclo}:
    get:
      summary: Obtém dados históricos para o gráfico de focos positivos
      description: |
        Retorna uma série histórica de dados com o total de focos positivos por ciclo, até o ano e ciclo especificados. Também inclui um resumo comparativo com o ciclo anterior.
        Esta rota é pública.
      tags:
        - Gráficos
      security: []
      parameters:
        - name: ano
          in: path
          required: true
          description: O ano do ciclo final da consulta.
          schema:
            type: integer
            example: 2025
        - name: ciclo
          in: path
          required: true
          description: O número do ciclo final da consulta.
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: Dados para o gráfico retornados com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraficoFocosPositicosResponse'
        '500':
          description: Erro interno do servidor.

  /grafico/imoveis_trabalhados/{ano}/{ciclo}:
    get:
      summary: Obtém dados para o gráfico de imóveis trabalhados
      description: |
        Retorna um resumo da quantidade de imóveis por status (inspecionado, bloqueado, fechado, recusado) para um ciclo específico.
        Requer autenticação.
      tags:
        - Gráficos
      security: []
      parameters:
        - name: ano
          in: path
          required: true
          description: O ano do ciclo a ser consultado.
          schema:
            type: integer
            example: 2025
        - name: ciclo
          in: path
          required: true
          description: O número do ciclo a ser consultado.
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: Dados para o gráfico retornados com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraficoImoveisTrabalhados'
        '401':
          description: Não autenticado (token ausente ou inválido).
        '500':
          description: Erro interno do servidor.

  /grafico/taxa_de_reincidencia/{ano}/{ciclo}:
    get:
      summary: Obtém dados para o gráfico de taxa de reincidência
      description: |
        Retorna o número de imóveis reincidentes com focos positivos (comparado ao ciclo anterior), agrupados por bairro, para um ciclo específico.
        Requer autenticação.
      tags:
        - Gráficos
      security: []
      parameters:
        - name: ano
          in: path
          required: true
          description: O ano do ciclo a ser consultado.
          schema:
            type: integer
            example: 2025
        - name: ciclo
          in: path
          required: true
          description: O número do ciclo a ser consultado.
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: Dados de reincidência por bairro retornados com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraficoTaxaDeReincidencia'
        '401':
          description: Não autenticado (token ausente ou inválido).
        '500':
          description: Erro interno do servidor.

  /grafico/casos_confirmados/{ano}/{ciclo}:
    get:
      summary: Obtém dados históricos para o gráfico de casos confirmados
      description: |
        Retorna uma série histórica de dados com o total de casos confirmados por ciclo, até o ano e ciclo especificados. Também inclui um resumo comparativo com o ciclo anterior.
        Esta rota é pública.
      tags:
        - Gráficos
      security: []
      parameters:
        - name: ano
          in: path
          required: true
          description: O ano do ciclo final da consulta.
          schema:
            type: integer
            example: 2025
        - name: ciclo
          in: path
          required: true
          description: O número do ciclo final da consulta.
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: Dados para o gráfico retornados com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraficoCasosConfirmadosResponse'
        '500':
          description: Erro interno do servidor.
  
  /grafico/atividades_realizadas/{ano}/{ciclo}:
    get:
      summary: Obtém dados para o gráfico de atividades realizadas
      description: |
        Retorna a contagem total de cada tipo de atividade (LI, PE, T, DF, PVE) realizada em um ciclo específico.
        Requer autenticação.
      tags:
        - Gráficos
      security: []
      parameters:
        - name: ano
          in: path
          required: true
          description: O ano do ciclo a ser consultado.
          schema:
            type: integer
            example: 2025
        - name: ciclo
          in: path
          required: true
          description: O número do ciclo a ser consultado.
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: Dados para o gráfico retornados com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraficoAtividadesRealizadas'
        '401':
          description: Não autenticado (token ausente ou inválido).
        '500':
          description: Erro interno do servidor.

  /grafico/acoes_bloqueio/{ano}:
    get:
      summary: Obtém dados para o gráfico de Ações de Bloqueio
      description: |
        Retorna a quantidade de imóveis com status 'bloqueado' para cada bairro, agrupados por ciclo, dentro de um ano específico. Os dados são formatados para uso direto em bibliotecas de gráficos.
        Esta rota é pública.
      tags:
        - Gráficos
      security: []
      parameters:
        - name: ano
          in: path
          required: true
          description: O ano a ser consultado.
          schema:
            type: integer
            example: 2025
      responses:
        '200':
          description: Dados para o gráfico retornados com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraficoPorBairroResponse'
        '500':
          description: Erro interno do servidor.

  /grafico/casos_por_ciclo/{ano}:
    get:
      summary: Obtém dados para o gráfico de Casos por Ciclo
      description: |
        Retorna a quantidade de casos confirmados para cada bairro, agrupados por ciclo, dentro de um ano específico. Os dados são formatados para uso direto em bibliotecas de gráficos.
        Esta rota é pública.
      tags:
        - Gráficos
      security: []
      parameters:
        - name: ano
          in: path
          required: true
          description: O ano a ser consultado.
          schema:
            type: integer
            example: 2025
      responses:
        '200':
          description: Dados para o gráfico retornados com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraficoPorBairroResponse'
        '500':
          description: Erro interno do servidor.

  /grafico/depositos_por_ciclo/{ano}:
    get:
      summary: Obtém dados para o gráfico de Depósitos por Ciclo
      description: |
        Retorna a quantidade total de depósitos (soma de todos os tipos) para cada bairro, agrupados por ciclo, dentro de um ano específico. Os dados são formatados para uso direto em bibliotecas de gráficos.
        Esta rota é pública.
      tags:
        - Gráficos
      security: []
      parameters:
        - name: ano
          in: path
          required: true
          description: O ano a ser consultado.
          schema:
            type: integer
            example: 2025
      responses:
        '200':
          description: Dados para o gráfico retornados com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraficoPorBairroResponse'
        '500':
          description: Erro interno do servidor.

  /criar_ciclo:
    post:
      summary: Cria e inicia um novo ciclo de visitas
      description: |
        Inicia um novo ciclo de visitas. Esta é uma ação transacional que realiza várias operações:
        1. Desativa o ciclo ativo anterior, definindo sua data de encerramento.
        2. Cria um novo ciclo, incrementando o número do ciclo ou reiniciando para 1 se for um novo ano.
        3. Copia todos os registros de imóveis do ciclo anterior para o novo, zerando seus status e dados de visita para que possam ser inspecionados novamente.

        Esta rota não requer um corpo de requisição.
        **Atenção:** Apenas usuários com nível de acesso "supervisor" podem executar esta ação.
      tags:
        - Ciclo
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Novo ciclo criado e iniciado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NovoCicloResponse'
        '400':
          description: Já existe um ciclo ativo. Não é possível criar um novo ciclo enquanto outro estiver ativo.
        '401':
          description: Não autenticado (token JWT ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não é um supervisor).
        '500':
          description: Erro interno do servidor (falha na transação do banco de dados).

  /finalizar_ciclo:
    post:
      summary: Finaliza o ciclo de visitas ativo
      description: |
        Encerra o ciclo de visitas atualmente ativo no sistema. 
        Esta ação busca o último ciclo marcado como 'ativo', define seu status como inativo (`ativo = False`) e registra a data/hora de encerramento. 
        Após esta operação, novos registros de campo não poderão ser associados a este ciclo. 
        Um novo ciclo precisará ser criado para continuar os registros.

        Esta rota não requer um corpo de requisição.
        **Atenção:** Apenas usuários com nível de acesso "supervisor" podem executar esta ação.
      tags:
        - Ciclo
      security:
        - bearerAuth: []
      responses:
        '200': # Alterado de 201 para 200 OK, pois é uma atualização de estado, não criação.
          description: Ciclo ativo finalizado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinalizarCicloResponse'
        '401':
          description: Não autenticado (token JWT ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não é um supervisor).
        '500':
          description: Erro interno do servidor (falha na transação do banco de dados ou nenhum ciclo ativo encontrado).

  
  /larvicida/{larvicida_id}:
    put:
      summary: Atualiza um registro de larvicida
      description: |
        Atualiza as informações (tipo, forma, quantidade) de um registro de larvicida específico.
        Requer autenticação.
      tags:
        - Registro de Campo
      security:
        - bearerAuth: []
      parameters:
        - name: larvicida_id
          in: path
          required: true
          description: O ID do larvicida a ser atualizado.
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          multipart/form-data: # Seu código usa request.form, então é form-data
            schema:
              type: object
              required:
                - tipo
                - forma
                - quantidade
              properties:
                tipo: { type: string, example: "Pyriproxyfen UPDATED" }
                forma: { type: string, example: "Líquido" }
                quantidade: { type: integer, example: 8 }
      responses:
        '200':
          description: Larvicida atualizado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: "success" }
                  message: { type: string, example: "Larvicida atualizado com sucesso" }
                  data:
                    $ref: '#/components/schemas/UpdateLarvicidaResponseData'
        '400':
          description: Requisição inválida (dados incorretos).
        '401':
          description: Não autenticado (token ausente ou inválido).
        '404': # Adicionar tratamento de 404 no código PUT se o ID não existir
          description: Larvicida não encontrado com o ID especificado.
        '500':
          description: Erro interno do servidor.
          
    delete:
      summary: Deleta um registro de larvicida por ID
      description: |
        Remove um registro de larvicida específico do sistema, identificado pelo seu ID.
        Requer autenticação.
      tags:
        - Registro de Campo
      security:
        - bearerAuth: []
      parameters:
        - name: larvicida_id
          in: path
          required: true
          description: O ID do larvicida a ser deletado.
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Larvicida deletado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "larvicida with ID 1 deleted successfully."
        '401':
          description: Não autenticado (token ausente ou inválido).
        '404':
          description: Larvicida não encontrado com o ID especificado.
        '500':
          description: Erro interno do servidor.

  /adulticida/{adulticida_id}:
    put:
      summary: Atualiza um registro de adulticida
      description: |
        Atualiza as informações (tipo, quantidade) de um registro de adulticida específico.
        Requer autenticação.
      tags:
        - Registro de Campo
      security:
        - bearerAuth: []
      parameters:
        - name: adulticida_id
          in: path
          required: true
          description: O ID do adulticida a ser atualizado.
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          multipart/form-data: # Seu código usa request.form
            schema:
              type: object
              required:
                - tipo
                - quantidade
              properties:
                tipo: { type: string, example: "Piretróide UPDATED" }
                quantidade: { type: integer, example: 25 }
      responses:
        '200':
          description: Adulticida atualizado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: "success" }
                  message: { type: string, example: "Adulticida atualizado com sucesso" }
                  data:
                    $ref: '#/components/schemas/UpdateAdulticidaResponseData'
        '400':
          description: Requisição inválida (dados incorretos).
        '401':
          description: Não autenticado (token ausente ou inválido).
        '404': # Adicionar tratamento de 404 no código PUT se o ID não existir
          description: Adulticida não encontrado com o ID especificado.
        '500':
          description: Erro interno do servidor.
          
    delete:
      summary: Deleta um registro de adulticida por ID
      description: |
        Remove um registro de adulticida específico do sistema, identificado pelo seu ID.
        Requer autenticação.
      tags:
        - Registro de Campo
      security:
        - bearerAuth: []
      parameters:
        - name: adulticida_id
          in: path
          required: true
          description: O ID do adulticida a ser deletado.
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Adulticida deletado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "adulticida with ID 1 deleted successfully."
        '401':
          description: Não autenticado (token ausente ou inválido).
        '404':
          description: Adulticida não encontrado com o ID especificado.
        '500':
          description: Erro interno do servidor.
  
  /area_de_visita_denuncias/{agente_id}:
    get:
      summary: Busca áreas de visita e denúncias de um agente específico
      description: |
        Retorna um objeto contendo duas listas: as áreas de visita atribuídas a um agente e as denúncias pelas quais ele é o responsável.
        Requer autenticação.
      tags:
        - Usuários
      security:
        - bearerAuth: []
      parameters:
        - name: agente_id
          in: path
          required: true
          description: O ID do agente cujos dados serão buscados.
          schema:
            type: integer
            example: 7
      responses:
        '200':
          description: Áreas de visita e denúncias do agente retornadas com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgenteVisitasDenunciasResponse'
        '401':
          description: Não autenticado (token JWT ausente ou inválido).
        '404':
          description: Agente não encontrado com o ID especificado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Agente não encontrado"
        '500':
          description: Erro interno do servidor (falha na conexão ou consulta ao banco de dados).
  