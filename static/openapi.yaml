openapi: 3.0.3
info:
  title: Score API
  version: '1.0'
servers:
  - url: http://127.0.0.1:5000

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Token de autenticação JWT. Deve ser incluído no cabeçalho 'Authorization' com o prefixo 'Bearer'."
  schemas:
    ArtigoArquivoAnexo:
      type: object
      properties:
        arquivo_artigo_id:
          type: integer
          example: 5
        arquivo_nome:
          type: string
          example: "imagem_anexa.png"

    ArtigoOutput:
      type: object
      description: "Representa um artigo retornado pela API."
      properties:
        artigo_id:
          type: integer
          example: 42
        supervisor_id:
          type: integer
          example: 5
        data_criacao:
          type: string
          example: "Sat, 11 Oct 2025 00:00:00 GMT"
        link_artigo:
          type: string
          nullable: true
          format: uri
          example: "https://www.who.int/news-room/fact-sheets/detail/dengue-and-severe-dengue"
        titulo:
          type: string
          example: "Guia de Prevenção da Dengue"
        descricao:
          type: string
          example: "Um guia completo sobre como evitar focos do mosquito."
        imagem_nome:
          type: string
          nullable: true
          example: "capa_artigo.png"
        supervisor_nome:
          type: string
          description: "Nome do supervisor que publicou o artigo."
          example: "Carlos Pereira Costa"

    ArtigoCreateResponse:
      type: object
      description: "Resposta ao criar um novo artigo com sucesso."
      properties:
        message:
          type: string
          example: "Artigo e arquivos anexados criados com sucesso."
        artigo_id:
          type: integer
          example: 42
        titulo:
          type: string
          example: "Guia de Prevenção da Dengue"
        descricao:
          type: string
          example: "Um guia completo sobre como evitar focos do mosquito."
        link_artigo:
          type: string
          nullable: true
          format: uri
          example: "https://www.who.int/news-room/fact-sheets/detail/dengue-and-severe-dengue"
        imagem_nome:
          type: string
          nullable: true
          example: "capa_artigo.png"

    DenunciaCompleta:
      type: object
      properties:
        denuncia_id: { type: integer, example: 51 }
        rua_avenida: { type: string, example: "Avenida da Paz" }
        numero: { type: integer, example: 1000 }
        bairro: { type: string, example: "Centro" }
        tipo_imovel: { type: string, example: "Terreno Baldio" }
        endereco_complemento: { type: string, nullable: true, example: "Ao lado da padaria" }
        data_denuncia: { type: string, format: date, example: "2025-10-02" }
        hora_denuncia: { type: string, format: time, example: "15:59:00" }
        observacoes: { type: string, nullable: true, example: "Muitos pneus acumulados com água." }
        supervisor_id: { type: integer, example: 5 }
        deposito_id: { type: integer, example: 77 }
        nome_completo: { type: string, description: "Nome do supervisor que registrou a denúncia", example: "Carlos Pereira Costa" }
        cpf: { type: string, example: "34567890123" }
        email: { type: string, format: email, example: "carlos.costa@example.com" }
        agente_responsavel_id: { type: integer, nullable: true, example: 2 }
        # deposito:
        #   $ref: '#/components/schemas/Deposito'
        arquivos:
          type: array
          items:
            $ref: '#/components/schemas/ArquivoDenuncia'
    DenunciaResponseData:
      type: object
      properties:
        denuncia_id: { type: integer, example: 51 }
        supervisor_id: { type: integer, example: 5 }
        rua_avenida: { type: string, example: "Avenida da Paz" }
        numero: { type: integer, example: 1000 }
        bairro: { type: string, example: "Centro" }
        tipo_imovel: { type: string, example: "Terreno Baldio" }
        endereco_complemento: { type: string, nullable: true, example: "Ao lado da padaria" }
        data_denuncia: { type: string, format: date, example: "2025-10-02" }
        hora_denuncia: { type: string, example: "15:59" }
        observacoes: { type: string, nullable: true, example: "Muitos pneus acumulados com água." }
        agente_responsavel_id: { type: integer, nullable: true, example: 2 }
        # a1: { type: integer, example: 10 }
        # a2: { type: integer, example: 5 }
        # b: { type: integer, example: 3 }
        # c: { type: integer, example: 0 }
        # d1: { type: integer, example: 8 }
        # d2: { type: integer, example: 2 }
        # e: { type: integer, example: 1 }
        deposito_id: { type: integer, example: 77 }
        files:
          type: object
          example:
            Arquivo 1: "foto1.jpg"
            Arquivo 2: "foto2.png"
    UsuarioOutput:
      type: object
      properties:
        usuario_id: { type: integer, example: 12 }
        nome_completo: { type: string, example: "Maria da Silva" }
        cpf: { type: string, example: "11122233344" }
        rg: { type: string, nullable: true, example: "1234567" }
        data_nascimento: { type: string, format: date, example: "1990-10-25" }
        email: { type: string, format: email, example: "maria.silva@example.com" }
        telefone_ddd: { type: integer, example: 82 }
        telefone_numero: { type: string, example: "999998888" }
        estado: { type: string, example: "AL" }
        municipio: { type: string, example: "Maceió" }
        bairro: { type: string, example: "Jatiúca" }
        logradouro: { type: string, example: "Avenida João Davino" }
        numero: { type: integer, example: 500 }
        registro_do_servidor: { type: string, example: "MAT12345" }
        cargo: { type: string, example: "Agente de Endemias" }
        situacao_atual: { type: boolean, example: true }
        data_de_admissao: { type: string, format: date, example: "2020-03-15" }
        # Removido 'setor_de_atuacao' daqui para colocar a estrutura completa em AgenteOutput
        nivel_de_acesso: { type: string, enum: [agente, supervisor], example: "agente" }

    AgenteOutput:
      type: object
      allOf:
        - $ref: '#/components/schemas/UsuarioOutput'
        - type: object
          properties:
            agente_id: 
              type: integer
              example: 7
            setor_de_atuacao:
              type: array
              description: "Lista detalhada das áreas de atuação do agente."
              items:
                $ref: '#/components/schemas/AreaDeVisitaDetalhes'

    SupervisorOutput:
      type: object
      allOf:
        - $ref: '#/components/schemas/UsuarioOutput'
        - type: object
          properties:
            supervisor_id: { type: integer, example: 3 }
    UsuarioInput:
      type: object
      required:
        - nome_completo
        - cpf
        - data_nascimento
        - email
        - telefone_ddd
        - telefone_numero
        - estado
        - municipio
        - bairro
        - logradouro
        - numero
        - registro_do_servidor
        - cargo
        - situacao_atual
        - data_de_admissao
        - setor_de_atuacao
        - senha
        - nivel_de_acesso
      properties:
        nome_completo: { type: string, example: "Maria da Silva" }
        cpf: { type: string, example: "11122233344" }
        rg: { type: string, nullable: true, example: "1234567" }
        data_nascimento: { type: string, format: date, example: "1990-10-25" }
        email: { type: string, format: email, example: "maria.silva@example.com" }
        telefone_ddd: { type: integer, example: 82 }
        telefone_numero: { type: string, example: "999998888" }
        estado: { type: string, example: "AL" }
        municipio: { type: string, example: "Maceió" }
        bairro: { type: string, example: "Jatiúca" }
        logradouro: { type: string, example: "Avenida João Davino" }
        numero: { type: integer, example: 500 }
        registro_do_servidor: { type: string, example: "MAT12345" }
        cargo: { type: string, example: "Agente de Endemias" }
        situacao_atual: { type: boolean, example: true }
        data_de_admissao: { type: string, format: date, example: "2020-03-15" }
        # MUDANÇA IMPORTANTE AQUI:
        setor_de_atuacao:
          type: array
          items:
            type: integer
          description: "Lista de IDs das áreas de visita. Obrigatório se 'nivel_de_acesso' for 'agente'."
          example: [2, 3]
        senha: { type: string, format: password, example: "senhaSegura123" }
        nivel_de_acesso: { type: string, enum: [agente, supervisor], example: "agente" }

    
    AreaDeVisitaInput:
      type: object
      required:
        - cep
        - setor
        - numero_quarteirao
        - estado
        - municipio
        - bairro
        - logradouro
      properties:
        cep: { type: string, example: "57046-140" }
        setor: { type: string, example: "Setor Serraria 08" }
        numero_quarteirao: { type: integer, example: 15 }
        estado: { type: string, example: "AL" }
        municipio: { type: string, example: "Maceió" }
        bairro: { type: string, example: "Serraria" }
        logadouro: { type: string, example: "Avenida Menino Marcelo" }
        
    AgenteResumido:
      type: object
      description: "Representação resumida de um agente."
      properties:
        agente_id:
          type: integer
          example: 1
        nome:
          type: string
          example: "João da Silva"
        situacao_atual:
          type: boolean 
          example: true 
    AreaDeVisitaDetalhes:
      type: object
      properties:
        area_de_visita_id:
          type: integer
          example: 1
        bairro:
          type: string
          example: "Ponta Verde"
        cep:
          type: string
          example: "57035-180"
        estado:
          type: string
          example: "AL"
        logadouro:
          type: string
          example: "Avenida Álvaro Otacílio"
        municipio:
          type: string
          example: "Maceió"
        numero_quarteirao:
          type: integer
          example: 15
        setor:
          type: string
          example: "Setor Ponta Verde 01"
        agentes:
          type: array
          description: "Lista de agentes associados a esta área de visita."
          items:
            $ref: '#/components/schemas/AgenteResumido'
    Deposito:
      type: object
      properties:
        a1: { type: integer, example: 5 }
        a2: { type: integer, example: 2 }
        b: { type: integer, example: 0 }
        c: { type: integer, example: 1 }
        d1: { type: integer, example: 3 }
        d2: { type: integer, example: 0 }
        e: { type: integer, example: 4 }
    Larvicida:
      type: object
      properties:
        tipo: { type: string, example: "temefos" }
        forma: { type: string, example: "g" }
        quantidade: { type: integer, example: 10 }
    Adulticida:
      type: object
      properties:
        tipo: { type: string, example: "malathion" }
        quantidade: { type: integer, example: 200 }
    Arquivo:
      type: object
      properties:
        registro_de_campo_arquivo_id: { type: integer, example: 23 }
        arquivo_nome: { type: string, example: "foto_quintal.jpg" }
    ArquivoDenuncia:
      type: object
      properties:
        arquivo_denuncia_id: { type: integer, example: 23 }
        arquivo_nome: { type: string, example: "foto_quintal.jpg" }
    AreaDeVisita:
      type: object
      properties:
        bairro: { type: string, example: "Serraria" }
        cep: { type: string, example: "57046-140" }
        estado: { type: string, example: "AL" }
        logadouro: { type: string, example: "Avenida Menino Marcelo" }
        municipio: { type: string, example: "Maceió" }
        setor: { type: string, example: "Setor Serraria 08" }
    Ciclo:
      type: object
      properties:
        ano_de_criacao: { type: string, format: date-time, example: "2025-09-19T00:00:00Z" }
        ciclo: { type: integer, example: 6 }

    RegistroDeCampoCompleto:
      type: object
      properties:
        registro_de_campo_id: { type: integer, example: 1 }
        imovel_numero: { type: string, example: "123A" }
        imovel_lado: { type: string, example: "Par" }
        imovel_categoria_da_localidade: { type: string, example: "Urbana" }
        imovel_tipo: { type: string, example: "Residencial" }
        imovel_status: { type: string, example: "Trabalhado" }
        imovel_complemento: { type: string, nullable: true, example: "Apto 101" }
        formulario_tipo: { type: string, nullable: true, example: "Dengue" }
        li: { type: boolean, example: true }
        pe: { type: boolean, example: false }
        t: { type: boolean, example: true }
        df: { type: boolean, example: false }
        pve: { type: boolean, example: false }
        numero_da_amostra: { type: string, nullable: true, example: "A-002" }
        quantiade_tubitos: { type: string, nullable: true, example: "3" }
        observacao: { type: string, nullable: true, example: "Cão bravo no quintal." }
        area_de_visita_id: { type: integer, example: 2 }
        agente_id: { type: integer, example: 12 }
        deposito_id: { type: integer, example: 45 }
        agente_nome: { type: string, example: "João da Silva" }
        deposito:
          $ref: '#/components/schemas/Deposito'
        larvicidas:
          type: array
          items:
            $ref: '#/components/schemas/Larvicida'
        adulticidas:
          type: array
          items:
            $ref: '#/components/schemas/Adulticida'
        arquivos:
          type: array
          items:
            $ref: '#/components/schemas/Arquivo'
        area_de_visita:
          $ref: '#/components/schemas/AreaDeVisita'
        ciclo:
          $ref: '#/components/schemas/Ciclo'
paths:
  /login:
    post:
      summary: Authenticates a user and returns a JWT token
      description: Autentica o usuário e retorna um token JWT que deve ser usado para autenticar requisições futuras.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: O CPF do usuário.
                  example: "12345678900"
                password:
                  type: string
                  description: A senha do usuário.
                  format: password
                  example: "mysecretpassword"
      responses:
        '200':
          description: Login bem-sucedido.
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: O CPF do usuário.
                  nivel_de_acesso:
                    type: string
                    description: O nível de acesso do usuário.
                  token:
                    type: string
                    description: O Token JWT para autenticação.
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Falha na autenticação (CPF ou senha incorretos).
        '500':
          description: Erro interno do servidor.

  /registro_de_campo:
    post:
      summary: Cria um novo registro de campo
      description: |
        Submete um registro de campo completo via formulário.
        **Atenção:** Apenas usuários com nível de acesso "agente" podem realizar esta ação.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - imovel_numero
                - imovel_lado
                - imovel_categoria_da_localidade
                - imovel_tipo
                - imovel_status
                - area_de_visita_id
                - a1
                - a2
                - b
                - c
                - d1
                - d2
                - e
              properties:
                imovel_numero: { type: string, description: "Número do imóvel.", example: "45" }
                imovel_lado: { type: string, description: "Lado da rua (Par/Ímpar).", example: "Ímpar" }
                imovel_categoria_da_localidade: { type: string, example: "Urbana" }
                imovel_tipo: { type: string, example: "Residencial" }
                imovel_status: { type: string, example: "Trabalhado" }
                imovel_complemento: { type: string, description: "Ex: Apto 101, Bloco C", nullable: true }
                formulario_tipo: { type: string, example: "Dengue", nullable: true }
                li: { type: boolean, description: "Flag booleana para LI." }
                pe: { type: boolean, description: "Flag booleana para PE." }
                t: { type: boolean, description: "Flag booleana para T." }
                df: { type: boolean, description: "Flag booleana para DF." }
                pve: { type: boolean, description: "Flag booleana para PVE." }
                numero_da_amostra: { type: string, example: "A-003", nullable: true }
                quantiade_tubitos: { type: string, example: "4", nullable: true }
                observacao: { type: string, nullable: true }
                area_de_visita_id: { type: integer, example: 2 }
                a1: { type: integer, description: "Contagem depósito A1", example: 2 }
                a2: { type: integer, description: "Contagem depósito A2", example: 1 }
                b: { type: integer, description: "Contagem depósito B", example: 1 }
                c: { type: integer, description: "Contagem depósito C", example: 1 }
                d1: { type: integer, description: "Contagem depósito D1", example: 3 }
                d2: { type: integer, description: "Contagem depósito D2", example: 1 }
                e: { type: integer, description: "Contagem depósito E", example: 1 }
                larvicidas:
                  type: string
                  description: "String JSON representando um array de larvicidas utilizados."
                  example: '[{"tipo": "A", "forma": "g", "quantidade": 10}, {"tipo": "B", "forma": "t", "quantidade": 3}]'
                adulticidas:
                  type: string
                  description: "String JSON representando um array de adulticidas utilizados."
                  example: '[{"tipo": "W", "quantidade": 200}, {"tipo": "E", "quantidade": 100}]'
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: "Um ou mais arquivos para upload."
      responses:
        '201':
          description: Registro de campo criado com sucesso.
        '400':
          description: Requisição inválida (campos faltando ou dados incorretos).
        '401':
          description: Não autenticado (token ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não é um agente).
        '500':
          description: Erro interno do servidor.
    
    get:
      summary: Lista todos os registros de campo
      description: Retorna uma lista completa de todos os registros de campo. Requer autenticação.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de registros retornada com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegistroDeCampoCompleto'
        '401':
          description: Não autorizado.
        '500':
          description: Erro interno do servidor.

  /registro_de_campo/{registro_de_campo_id}:
    get:
      summary: Busca um registro de campo por ID
      description: Retorna os detalhes completos de um único registro de campo pelo seu ID. Requer autenticação.
      security:
        - bearerAuth: []
      parameters:
        - name: registro_de_campo_id
          in: path
          required: true
          description: O ID do registro de campo a ser buscado.
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Detalhes do registro de campo retornados com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegistroDeCampoCompleto'
        '401':
          description: Não autorizado.
        '404':
          description: Registro de campo não encontrado.
        '500':
          description: Erro interno do servidor.

  /area_de_visita:
    get:
      summary: Lista todas as áreas de visita
      description: |
        Retorna uma lista com todas as áreas de visita cadastradas.
        **Atenção:** Apenas usuários com nível de acesso "supervisor" podem executar esta ação.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de áreas de visita retornada com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AreaDeVisitaDetalhes'
        '401':
          description: Não autorizado (token ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não é um supervisor).
        '500':
          description: Erro interno do servidor.
    post:
      summary: Cria múltiplas áreas de visita (em lote)
      description: |
        Registra uma ou mais áreas de visita no sistema a partir de uma lista JSON. A operação é transacional: ou todas as áreas são criadas com sucesso, ou nenhuma é.
        **Atenção:** Apenas usuários com nível de acesso "supervisor" podem executar esta ação.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: Uma lista de objetos, onde cada objeto representa uma nova área de visita a ser criada.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AreaDeVisitaInput'
            example:
              - cep: "57000-001"
                setor: "Setor A 01"
                numero_quarteirao: 10
                estado: "AL"
                municipio: "Maceió"
                bairro: "Centro"
                logadouro: "Rua do Comércio"
              - cep: "57000-002"
                setor: "Setor B 02"
                numero_quarteirao: 25
                estado: "AL"
                municipio: "Maceió"
                bairro: "Ponta Verde"
                logadouro: "Avenida Álvaro Otacílio"
      responses:
        '201':
          description: Áreas de visita criadas com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "2 Áreas de visita criadas com sucesso." }
                  supervisor_id: { type: integer, example: 5 }
                  areas_criadas_ids:
                    type: array
                    items:
                      type: integer
                    example: [103, 104]
        '400':
          description: Requisição inválida. Ocorre se o corpo não for uma lista JSON, se a lista estiver vazia, ou se algum objeto na lista tiver dados faltando ou inválidos.
        '401':
          description: Não autorizado (token ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não é um supervisor).
        '500':
          description: Erro interno do servidor.
    
    delete:
      summary: Deleta múltiplas áreas de visita (em lote)
      description: |
        Remove uma ou mais áreas de visita do sistema com base em uma lista de IDs fornecida. A operação é transacional e será revertida se algum dos IDs não for encontrado.
        **Atenção:** Apenas usuários com nível de acesso "supervisor" podem deletar áreas.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: Um objeto JSON contendo uma lista de IDs das áreas de visita a serem deletadas.
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: integer
                  example: [2, 3]
      responses:
        '200':
          description: Áreas de visita deletadas com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Areas de visitas com IDs [101, 102] deletadas com sucesso"
        '400':
          description: Requisição inválida (o campo 'ids' está faltando ou não é uma lista).
        '401':
          description: Não autenticado (token ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não é um supervisor).
        '404':
          description: Uma ou mais áreas de visita com os IDs especificados não foram encontradas.
        '500':
          description: Erro interno do servidor.

  /area_de_visita/{area_de_visita_id}:
    get:
      summary: Busca uma área de visita por ID
      description: |
        Retorna os detalhes de uma área de visita específica, identificada pelo seu ID.
        **Atenção:** Apenas usuários com nível de acesso "supervisor" podem executar esta ação.
      security:
        - bearerAuth: []
      parameters:
        - name: area_de_visita_id
          in: path
          required: true
          description: O ID da área de visita a ser buscada.
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: Detalhes da área de visita retornados com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AreaDeVisitaDetalhes'
              example:
                area_de_visita_id: 2
                cep: "57046-140"
                setor: "Setor Serraria 08"
                numero_quarteirao: 15
                estado: "AL"
                municipio: "Maceió"
                bairro: "Serraria"
                logadouro: "Avenida Menino Marcelo"
        '401':
          description: Não autorizado (token ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não é um supervisor).
        '404':
          description: Área de visita não encontrada com o ID especificado.
        '500':
          description: Erro interno do servidor.
    
    put:
      summary: Atualiza uma área de visita por ID
      description: |
        Atualiza todas as informações de uma área de visita específica, identificada pelo seu ID.
        **Atenção:** Apenas usuários com nível de acesso "supervisor" podem executar esta ação.
      security:
        - bearerAuth: []
      parameters:
        - name: area_de_visita_id
          in: path
          required: true
          description: O ID da área de visita a ser atualizada.
          schema:
            type: integer
            example: 2
      requestBody:
        required: true
        description: Um objeto JSON com todos os campos da área de visita a serem atualizados.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AreaDeVisitaInput'
      responses:
        '200':
          description: Área de visita atualizada com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Área de visita atualizada com sucesso"
                  area_de_visita_id:
                    type: integer
                    example: 2
                  supervisor_id:
                    type: integer
                    example: 5
        '400':
          description: Requisição inválida (ex 'numero_quarteirao' não é um inteiro).
        '401':
          description: Não autenticado (token ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não é um supervisor).
        '404':
          description: Área de visita não encontrada com o ID especificado.
        '500':
          description: Erro interno do servidor.
          
  /usuarios:
    post:
      summary: Cria múltiplos usuários (em lote)
      description: |
        Registra um ou mais usuários no sistema a partir de uma lista JSON. A operação é transacional: ou todos os usuários são criados com sucesso, ou nenhum é.
        **Atenção:** Apenas usuários com nível de acesso "supervisor" podem executar esta ação.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: Uma lista de objetos, onde cada objeto representa um novo usuário a ser criado.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UsuarioInput'
            example:
              - nome_completo: "Carlos Souza"
                cpf: "44455566677"
                rg: "7654321"
                data_nascimento: "1985-05-20"
                email: "carlos.souza@example.com"
                telefone_ddd: 82
                telefone_numero: "988887777"
                estado: "AL"
                municipio: "Maceió"
                bairro: "Ponta Verde"
                logradouro: "Rua Durval Guimarães"
                numero: 1000
                registro_do_servidor: "MAT54321"
                cargo: "Agente de Endemias"
                situacao_atual: true
                data_de_admissao: "2018-07-22"
                setor_de_atuacao: [2, 3]
                senha: "outraSenhaForte456"
                nivel_de_acesso: "agente"
              - nome_completo: "Luiza Souza"
                cpf: "4445366677"
                rg: "7654321"
                data_nascimento: "1985-05-20"
                email: "carlos.sou3za@example.com"
                telefone_ddd: 82
                telefone_numero: "988887777"
                estado: "AL"
                municipio: "Maceió"
                bairro: "Ponta Verde"
                logradouro: "Rua Durval Guimarães"
                numero: 1000
                registro_do_servidor: "MAT54321"
                cargo: "Agente de Endemias"
                situacao_atual: true
                data_de_admissao: "2018-07-22"
                senha: "outraSenhaForte456"
                nivel_de_acesso: "supervisor"
      responses:
        '201':
          description: Usuários criados com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "1 Usuários criados com sucesso." }
                  supervisor_criador_id: { type: integer, example: 5 }
                  usuarios_criados_ids:
                    type: array
                    items:
                      type: integer
                    example: [25, 26]
        '400':
          description: Requisição inválida. Ocorre se o corpo não for uma lista JSON, se a lista estiver vazia, ou se algum usuário tiver dados faltando ou inválidos.
        '401':
          description: Não autorizado (token ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não é um supervisor).
        '409':
          description: Conflito. Um dos usuários na lista já existe (CPF ou e-mail duplicado).
        '500':
          description: Erro interno do servidor.
          
    get:
      summary: Lista todos os usuários (agentes e supervisores)
      description: |
        Retorna um objeto contendo duas listas separadas: uma com todos os agentes e outra com todos os supervisores cadastrados no sistema.
        Requer autenticação.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de usuários retornada com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  agentes:
                    type: array
                    items:
                      $ref: '#/components/schemas/AgenteOutput'
                  supervisores:
                    type: array
                    items:
                      $ref: '#/components/schemas/SupervisorOutput'

        '401':
          description: Não autorizado (token ausente ou inválido).
        '500':
          description: Erro interno do servidor.

  /usuarios/{user_id}:
    get:
      summary: Busca um usuário por ID
      description: |
        Retorna os detalhes completos de um único usuário, identificado pelo seu ID.
        A estrutura da resposta incluirá `agente_id` se o usuário for um agente, ou `supervisor_id` se for um supervisor.
        Requer autenticação.
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          description: O ID do usuário a ser buscado.
          schema:
            type: integer
            example: 12
      responses:
        '200':
          description: Detalhes do usuário retornados com sucesso.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/AgenteOutput'
                  - $ref: '#/components/schemas/SupervisorOutput'
              examples:
                exemploAgente:
                  summary: Exemplo de resposta para um usuário Agente
                  value:
                    usuario_id: 12
                    nome_completo: "Maria da Silva"
                    cpf: "11122233344"
                    rg: "1234567"
                    data_nascimento: "1990-10-25"
                    email: "maria.silva@example.com"
                    telefone_ddd: 82
                    telefone_numero: "999998888"
                    estado: "AL"
                    municipio: "Maceió"
                    bairro: "Jatiúca"
                    logradouro: "Avenida João Davino"
                    numero: 500
                    registro_do_servidor: "MAT12345"
                    cargo: "Agente de Endemias"
                    situacao_atual: true
                    data_de_admissao: "2020-03-15"
                    nivel_de_acesso: "agente"
                    agente_id: 7
                    setor_de_atuacao:
                      - area_de_visita_id: 2
                        cep: "57046-140"
                        setor: "Setor Serraria 08"
                        numero_quarteirao: 15
                        estado: "AL"
                        municipio: "Maceió"
                        bairro: "Serraria"
                        logadouro: "Avenida Menino Marcelo"
                      - area_de_visita_id: 3
                        cep: "57046-150"
                        setor: "Setor Ponta Verde 05"
                        numero_quarteirao: 8
                        estado: "AL"
                        municipio: "Maceió"
                        bairro: "Ponta Verde"
                        logadouro: "Rua Professor Antônio Gomes de Barros"
                exemploSupervisor:
                  summary: Exemplo de resposta para um usuário Supervisor
                  value:
                    usuario_id: 5
                    nome_completo: "Carlos Pereira Costa"
                    cpf: "34567890123"
                    rg: "3456789"
                    data_nascimento: "1988-11-01"
                    email: "carlos.costa@example.com"
                    telefone_ddd: 31
                    telefone_numero: "988776655"
                    estado: "MG"
                    municipio: "Belo Horizonte"
                    bairro: "Savassi"
                    logradouro: "Rua Fernandes Tourinho"
                    numero: 500
                    registro_do_servidor: "RS-2025-003"
                    cargo: "Supervisor de Campo"
                    situacao_atual: true
                    data_de_admissao: "2023-08-15"
                    nivel_de_acesso: "supervisor"
                    supervisor_id: 3
        '401':
          description: Não autenticado (token ausente ou inválido).
        '404':
          description: Usuário não encontrado com o ID especificado.
        '500':
          description: Erro interno do servidor.
  
  /denuncia:
    post:
      summary: Cria uma nova denúncia
      description: |
        Registra uma nova denúncia sobre um possível foco de dengue. A rota aceita dados do local, contagem de depósitos e múltiplos arquivos (fotos, vídeos) como evidência.
        **Atenção:** Apenas usuários com nível de acesso "supervisor" podem registrar denúncias.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - rua_avenida
                - numero
                - bairro
                - tipo_imovel
                # - a1
                # - a2
                # - b
                # - c
                # - d1
                # - d2
                # - e
              properties:
                rua_avenida: { type: string, example: "Avenida da Paz" }
                numero: { type: integer, example: 1000 }
                bairro: { type: string, example: "Centro" }
                tipo_imovel: { type: string, example: "Terreno Baldio" }
                endereco_complemento: { type: string, nullable: true, example: "Ao lado da padaria" }
                data_denuncia: { type: string, format: date, description: "Data da denúncia (opcional, ex: AAAA-MM-DD)", example: "2025-10-02" }
                hora_denuncia: { type: string, description: "Hora da denúncia (opcional, ex: HH:MM:SS)", example: "15:59:00" }
                observacoes: { type: string, nullable: true, example: "Muitos pneus acumulados com água." }
                agente_responsavel_id: { type: integer, nullable: true, example: "2" }
                # a1: { type: integer, description: "Contagem depósito A1", example: 10 }
                # a2: { type: integer, description: "Contagem depósito A2", example: 5 }
                # b: { type: integer, description: "Contagem depósito B", example: 3 }
                # c: { type: integer, description: "Contagem depósito C", example: 1 }
                # d1: { type: integer, description: "Contagem depósito D1", example: 8 }
                # d2: { type: integer, description: "Contagem depósito D2", example: 2 }
                # e: { type: integer, description: "Contagem depósito E", example: 1 }
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: "Um ou mais arquivos de evidência (fotos, etc)."
      responses:
        '201':
          description: Denúncia criada com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: "success" }
                  message: { type: string, example: "Denuncia recebida com sucesso" }
                  data:
                    $ref: '#/components/schemas/DenunciaResponseData'
        '400':
          description: Requisição inválida (campos obrigatórios faltando ou tipos de dados incorretos).
        '401':
          description: Não autenticado (token JWT ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não tem permissão de supervisor).
        '500':
          description: Erro interno do servidor.
          
    get:
      summary: Lista todas as denúncias
      description: |
        Retorna uma lista completa de todas as denúncias registradas no sistema.
        Cada denúncia na lista inclui detalhes do local, do supervisor responsável, depósitos e arquivos associados.
        Requer autenticação.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Uma lista de denúncias foi retornada com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DenunciaCompleta'
        '401':
          description: Não autenticado (token ausente ou inválido).
        '500':
          description: Erro interno do servidor.

  /denuncia/{denuncia_id}:
    get:
      summary: Busca uma denúncia por ID
      description: |
        Retorna os detalhes completos de uma única denúncia, identificada pelo seu ID.
        As informações incluem dados do local, supervisor, depósitos, e arquivos.
        Requer autenticação.
      security:
        - bearerAuth: []
      parameters:
        - name: denuncia_id
          in: path
          required: true
          description: O ID único da denúncia a ser buscada.
          schema:
            type: integer
            example: 51
      responses:
        '200':
          description: Detalhes da denúncia retornados com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DenunciaCompleta'
        '401':
          description: Não autenticado (token ausente ou inválido).
        '404':
          description: Nenhuma denúncia foi encontrada com o ID especificado.
        '500':
          description: Erro interno do servidor (pode ocorrer se o ID não for encontrado, devido a um IndexError no código).

  /artigo:
    post:
      summary: Cria um novo artigo
      description: |
        Registra um novo artigo informativo no sistema. A rota aceita um título, descrição, um link externo opcional e uma imagem de capa opcional.
        **Atenção:** Apenas usuários com nível de acesso "supervisor" podem criar artigos.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - titulo
                - descricao
                - link_artigo
              properties:
                titulo:
                  type: string
                  description: "O título do artigo."
                  example: "Como se Prevenir da Dengue"
                descricao:
                  type: string
                  description: "Uma breve descrição sobre o conteúdo do artigo."
                  example: "Dicas essenciais para o combate ao mosquito Aedes aegypti."
                link_artigo:
                  type: string
                  format: uri
                  description: "Link externo para o conteúdo completo do artigo (opcional)."
                  nullable: true
                  example: "https://www.gov.br/saude/pt-br/assuntos/saude-de-a-a-z/d/dengue"
                imagem:
                  type: string
                  format: binary
                  description: "Imagem de capa para o artigo (opcional)."
                  nullable: true
      responses:
        '201':
          description: Artigo criado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtigoCreateResponse'
        '400':
          description: Requisição inválida (campos obrigatórios faltando).
        '401':
          description: Não autenticado (token JWT ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não é um supervisor).
        '500':
          description: Erro interno do servidor.
    get:
      summary: Lista todos os artigos
      description: |
        Retorna uma lista de todos os artigos informativos cadastrados no sistema.
        Não Requer autenticação.
      security: []
      responses:
        '200':
          description: Uma lista de artigos foi retornada com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArtigoOutput'
        '401':
          description: Não autenticado (token ausente ou inválido).
        '500':
          description: Erro interno do servidor.

  /artigo/{artigo_id}:
    get:
      summary: Busca um artigo por ID
      description: |
        Retorna os detalhes completos de um único artigo, identificado pelo seu ID.
        Não Requer autenticação.
      security: []
      parameters:
        - name: artigo_id
          in: path
          required: true
          description: O ID único do artigo a ser buscado.
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: Detalhes do artigo retornados com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtigoOutput'
        '401':
          description: Não autenticado (token ausente ou inválido).
        '404':
          description: Artigo não encontrado com o ID especificado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Artigo not found"
        '500':
          description: Erro interno do servidor.
          
  /artigo/img/{artigo_id}:
    get:
      summary: Busca a imagem de capa de um artigo por ID
      description: |
        Retorna o arquivo de imagem associado a um artigo específico, identificado pelo seu ID. 
        A resposta não é um JSON, mas sim o próprio arquivo de imagem (e.g., PNG, JPG).
        Esta rota é pública e não requer autenticação.
      security: []
      parameters:
        - name: artigo_id
          in: path
          required: true
          description: O ID do artigo cuja imagem será buscada.
          schema:
            type: integer
            example: 42
      responses:
        '200':
          description: Imagem do artigo retornada com sucesso.
          content:
            image/png:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
        '404':
          description: Artigo ou imagem não encontrados no banco de dados ou no servidor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Imagem do Artigo não encontrada ou não cadastrada"
        '500':
          description: Erro interno do servidor.