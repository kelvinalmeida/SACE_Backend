openapi: 3.0.3
info:
  title: Score API
  version: '1.0'
servers:
  - url: http://127.0.0.1:5000

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Token de autenticação JWT. Deve ser incluído no cabeçalho 'Authorization' com o prefixo 'Bearer'."
  schemas:
    AreaDeVisitaDetalhes:
      type: object
      properties:
        area_de_visita_id: { type: integer, example: 101 }
        cep: { type: string, example: "57046-140" }
        setor: { type: string, example: "Setor Serraria 08" }
        numero_quarteirao: { type: integer, example: 15 }
        estado: { type: string, example: "AL" }
        municipio: { type: string, example: "Maceió" }
        bairro: { type: string, example: "Serraria" }
        logadouro: { type: string, example: "Avenida Menino Marcelo" }
    Deposito:
      type: object
      properties:
        a1: { type: integer, example: 5 }
        a2: { type: integer, example: 2 }
        b: { type: integer, example: 0 }
        c: { type: integer, example: 1 }
        d1: { type: integer, example: 3 }
        d2: { type: integer, example: 0 }
        e: { type: integer, example: 4 }
    Larvicida:
      type: object
      properties:
        tipo: { type: string, example: "temefos" }
        forma: { type: string, example: "g" }
        quantidade: { type: integer, example: 10 }
    Adulticida:
      type: object
      properties:
        tipo: { type: string, example: "malathion" }
        quantidade: { type: integer, example: 200 }
    Arquivo:
      type: object
      properties:
        registro_de_campo_arquivo_id: { type: integer, example: 23 }
        arquivo_nome: { type: string, example: "foto_quintal.jpg" }
    AreaDeVisita:
      type: object
      properties:
        bairro: { type: string, example: "Serraria" }
        cep: { type: string, example: "57046-140" }
        estado: { type: string, example: "AL" }
        logadouro: { type: string, example: "Avenida Menino Marcelo" }
        municipio: { type: string, example: "Maceió" }
        setor: { type: string, example: "Setor Serraria 08" }
    Ciclo:
      type: object
      properties:
        ano_de_criacao: { type: string, format: date-time, example: "2025-09-19T00:00:00Z" }
        ciclo: { type: integer, example: 6 }

    RegistroDeCampoCompleto:
      type: object
      properties:
        registro_de_campo_id: { type: integer, example: 1 }
        rua: { type: string, example: "Avenida Menino Marcelo" }
        imovel_numero: { type: string, example: "123A" }
        imovel_lado: { type: string, example: "Par" }
        imovel_categoria_da_localidade: { type: string, example: "Urbana" }
        imovel_tipo: { type: string, example: "Residencial" }
        imovel_status: { type: string, example: "Trabalhado" }
        imovel_complemento: { type: string, nullable: true, example: "Apto 101" }
        formulario_tipo: { type: string, nullable: true, example: "F1" }
        li: { type: boolean, example: true }
        pe: { type: boolean, example: false }
        t: { type: boolean, example: true }
        df: { type: boolean, example: false }
        pve: { type: boolean, example: false }
        numero_da_amostra: { type: string, nullable: true, example: "A-002" }
        quantiade_tubitos: { type: string, nullable: true, example: "3" }
        observacao: { type: string, nullable: true, example: "Cão bravo no quintal." }
        area_de_visita_id: { type: integer, example: 101 }
        agente_id: { type: integer, example: 12 }
        deposito_id: { type: integer, example: 45 }
        agente_nome: { type: string, example: "João da Silva" }
        deposito:
          $ref: '#/components/schemas/Deposito'
        larvicidas:
          type: array
          items:
            $ref: '#/components/schemas/Larvicida'
        adulticidas:
          type: array
          items:
            $ref: '#/components/schemas/Adulticida'
        arquivos:
          type: array
          items:
            $ref: '#/components/schemas/Arquivo'
        area_de_visita:
          $ref: '#/components/schemas/AreaDeVisita'
        ciclo:
          $ref: '#/components/schemas/Ciclo'
paths:
  /login:
    post:
      summary: Authenticates a user and returns a JWT token
      description: Autentica o usuário e retorna um token JWT que deve ser usado para autenticar requisições futuras.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: O CPF do usuário.
                  example: "12345678900"
                password:
                  type: string
                  description: A senha do usuário.
                  format: password
                  example: "mysecretpassword"
      responses:
        '200':
          description: Login bem-sucedido.
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: O CPF do usuário.
                  nivel_de_acesso:
                    type: string
                    description: O nível de acesso do usuário.
                  token:
                    type: string
                    description: O Token JWT para autenticação.
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Falha na autenticação (CPF ou senha incorretos).
        '500':
          description: Erro interno do servidor.

  /registro_de_campo:
    post:
      summary: Cria um novo registro de campo
      description: Submete um registro de campo completo. Requer autenticação via Token JWT. **Atenção:** É nescessário ser agente para relacizar essa ação.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - imovel_numero
                - imovel_lado
                - imovel_categoria_da_localidade
                - imovel_tipo
                - imovel_status
                - area_de_visita_id
                - a1
                - a2
                - b
                - c
                - d1
                - d2
                - e
              properties:
                imovel_numero: { type: string, description: "Número do imóvel." }
                imovel_lado: { type: string, description: "Lado da rua (Par/Ímpar)." }
                imovel_categoria_da_localidade: { type: string }
                imovel_tipo: { type: string }
                imovel_status: { type: string }
                area_de_visita_id: { type: integer }
                a1: { type: integer }
                a2: { type: integer }
                b: { type: integer }
                c: { type: integer }
                d1: { type: integer }
                d2: { type: integer }
                e: { type: integer }
                imovel_complemento: { type: string }
                formulario_tipo: { type: string }
                numero_da_amostra: { type: string }
                quantiade_tubitos: { type: string }
                observacao: { type: string }
                li: { type: boolean }
                pe: { type: boolean }
                t: { type: boolean }
                df: { type: boolean }
                pve: { type: boolean }
                larvicidas:
                  type: string
                  description: "String JSON de um array de larvicidas."
                  example: '[{"tipo": "C", "forma": "g", "quantidade": 3}]'
                adulticidas:
                  type: string
                  description: "String JSON de um array de adulticidas."
                  example: '[{"tipo": "A", "quantidade": 200}]'
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Um ou mais arquivos.
      responses:
        '200':
          description: Registro de campo criado com sucesso.
        '400':
          description: Requisição inválida (campos faltando ou dados incorretos).
        '401':
          description: É nescessário ser agente para cadastrar registro de campo. Peça para um supervisor cadastrar você..
        '500':
          description: Erro interno do servidor.
    get:
      summary: Lista todos os registros de campo
      description: Retorna uma lista completa de todos os registros de campo. Requer autenticação.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de registros retornada com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegistroDeCampoCompleto'
        '401':
          description: Não autorizado.
        '500':
          description: Erro interno do servidor.

  /registro_de_campo/{registro_de_campo_id}:
    get:
      summary: Busca um registro de campo por ID
      description: Retorna os detalhes completos de um único registro de campo pelo seu ID. Requer autenticação.
      security:
        - bearerAuth: []
      parameters:
        - name: registro_de_campo_id
          in: path
          required: true
          description: O ID do registro de campo a ser buscado.
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Detalhes do registro de campo retornados com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegistroDeCampoCompleto'
        '401':
          description: Não autorizado.
        '404':
          description: Registro de campo não encontrado.
        '500':
          description: Erro interno do servidor.

  /area_de_visita:
    post:
      summary: Cria uma nova área de visita
      description: |
        Registra uma nova área de visita no sistema. 
        **Atenção:** Apenas usuários com nível de acesso "supervisor" podem executar esta ação. A ID do supervisor é extraída do token JWT.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - cep
                - setor
                - numero_quarteirao
                - estado
                - municipio
                - bairro
                - logadouro
              properties:
                cep: { type: string, example: "57046-140" }
                setor: { type: string, example: "Setor Serraria 08" }
                numero_quarteirao: { type: integer, example: 15 }
                estado: { type: string, example: "AL" }
                municipio: { type: string, example: "Maceió" }
                bairro: { type: string, example: "Serraria" }
                logadouro: { type: string, example: "Avenida Menino Marcelo" }
      responses:
        '201':
          description: Área de visita criada com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Área de visita criada com sucesso" }
                  area_de_visita_id: { type: integer, example: 102 }
                  supervisor_id: { type: integer, example: 5 }
        '400':
          description: Requisição inválida (ex 'numero_quarteirao' não é um inteiro).
        '401':
          description: Não autorizado (token ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não é um supervisor).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: "É nescessário ser supervisor!" }
        '500':
          description: Erro interno do servidor.
    get:
      summary: Lista todas as áreas de visita
      description: |
        Retorna uma lista com todas as áreas de visita cadastradas.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de áreas de visita retornada com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AreaDeVisitaDetalhes'
        '401':
          description: Não autorizado (token ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não é um supervisor).
        '500':
          description: Erro interno do servidor.

  /area_de_visita/{area_de_visita_id}:
    get:
      summary: Busca uma área de visita por ID
      description: |
        Retorna os detalhes de uma área de visita específica, identificada pelo seu ID.
      security:
        - bearerAuth: []
      parameters:
        - name: area_de_visita_id
          in: path
          required: true
          description: O ID da área de visita a ser buscada.
          schema:
            type: integer
            example: 101
      responses:
        '200':
          description: Detalhes da área de visita retornados com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AreaDeVisitaDetalhes'
        '401':
          description: Não autorizado (token ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não é um supervisor).
        '404':
          description: Área de visita não encontrada com o ID especificado.
        '500':
          description: Erro interno do servidor.

  /varias_areas_de_visita:
    post:
      summary: Cria múltiplas áreas de visita (em lote)
      description: |
        Registra uma ou mais áreas de visita no sistema a partir de uma lista JSON. A operação é transacional: ou todas as áreas são criadas com sucesso, ou nenhuma é.
        **Atenção:** Apenas usuários com nível de acesso "supervisor" podem executar esta ação.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: Uma lista de objetos, onde cada objeto representa uma nova área de visita a ser criada.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AreaDeVisita'
            example:
              - cep: "57000-001"
                setor: "Setor A 01"
                numero_quarteirao: 10
                estado: "AL"
                municipio: "Maceió"
                bairro: "Centro"
                logadouro: "Rua do Comércio"
              - cep: "57000-002"
                setor: "Setor B 02"
                numero_quarteirao: 25
                estado: "AL"
                municipio: "Maceió"
                bairro: "Ponta Verde"
                logadouro: "Avenida Álvaro Otacílio"
      responses:
        '201':
          description: Áreas de visita criadas com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "2 Áreas de visita criadas com sucesso." }
                  supervisor_id: { type: integer, example: 5 }
                  areas_criadas_ids:
                    type: array
                    items:
                      type: integer
                    example: [103, 104]
        '400':
          description: Requisição inválida. Ocorre se o corpo não for uma lista JSON, se a lista estiver vazia, ou se algum objeto na lista tiver dados faltando ou inválidos.
        '401':
          description: Não autorizado (token ausente ou inválido).
        '403':
          description: Acesso proibido (usuário não é um supervisor).
        '500':
          description: Erro interno do servidor.